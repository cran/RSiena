
R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(RSiena)
> 
> 
> ##test3
> mynet1 <- sienaDependent(array(c(tmp3, tmp4),dim=c(32, 32, 2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(findiff=TRUE, fn = simstats0c,
+                        cond=FALSE, nsub=2, n3=50, seed=3)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> print('test3')
[1] "test3"
> ans<- siena07(mymodel, data=mydata, effects=myeff,
+      batch=TRUE, parallelTesting=TRUE, silent=TRUE)
> #,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0186  ( 0.5581   )    0.0134   
  2. eval outdegree (density)         -1.1374  ( 0.2723   )    0.1044   
  3. eval reciprocity                  1.7459  ( 0.2854   )   -0.1847   

Overall maximum convergence ratio:    0.3838 


Total of 407 iteration steps.

> (myeff <- includeEffects(myeff, transTrip, cycle4))
  effectName          include fix   test  initialValue parm
1 transitive triplets TRUE    FALSE FALSE          0   0   
2 4-cycles (#)        TRUE    FALSE FALSE          0   1   
  effectName                  include fix   test  initialValue parm
1 basic rate parameter mynet1 TRUE    FALSE FALSE    4.80941   0   
2 outdegree (density)         TRUE    FALSE FALSE   -0.56039   0   
3 reciprocity                 TRUE    FALSE FALSE    0.00000   0   
4 transitive triplets         TRUE    FALSE FALSE    0.00000   0   
5 4-cycles (#)                TRUE    FALSE FALSE    0.00000   1   
> (myeff <- includeEffects(myeff, cycle4, include=FALSE))
[1] effectName   include      fix          test         initialValue
[6] parm        
<0 rows> (or 0-length row.names)
  effectName                  include fix   test  initialValue parm
1 basic rate parameter mynet1 TRUE    FALSE FALSE    4.80941   0   
2 outdegree (density)         TRUE    FALSE FALSE   -0.56039   0   
3 reciprocity                 TRUE    FALSE FALSE    0.00000   0   
4 transitive triplets         TRUE    FALSE FALSE    0.00000   0   
> ##test4
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> print('test4')
[1] "test4"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.2640  ( 0.5554   )             

Other parameters: 
  1. eval outdegree (density) -1.7460  ( 0.4314   )   0.1523    
  2. eval reciprocity          1.4356  ( 0.4395   )   0.2525    
  3. eval transitive triplets  0.3126  ( 0.1201   )   0.0971    

Overall maximum convergence ratio:    0.2753 


Total of 231 iteration steps.

> ##test5
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c,  nsub=2, n3=50,
+                        cond=FALSE, seed=5)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> print('test5')
[1] "test5"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0451  ( 0.5078   )    0.0103   
  2. eval outdegree (density)         -1.1448  ( 0.1690   )   -0.2193   
  3. eval reciprocity                  1.7883  ( 0.3820   )   -0.0597   

Overall maximum convergence ratio:    0.2334 


Total of 588 iteration steps.

> (myeff <- includeEffects(myeff, outAct, fix=TRUE, test=TRUE))
  effectName           include fix  test initialValue parm
1 outdegree - activity TRUE    TRUE TRUE          0   0
  effectName                  include fix   test  initialValue parm
1 basic rate parameter mynet1 TRUE    FALSE FALSE    4.80941   0
2 outdegree (density)         TRUE    FALSE FALSE   -0.56039   0
3 reciprocity                 TRUE    FALSE FALSE    0.00000   0
4 outdegree - activity        TRUE     TRUE  TRUE    0.00000   0
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence
                                                   Error      t-ratio
  1. rate basic rate parameter mynet1  3.0512  ( 0.5362   )    0.0177
  2. eval outdegree (density)         -1.1688  ( 0.1862   )   -0.1783
  3. eval reciprocity                  1.8243  ( 0.4225   )   -0.1683
  4. eval outdegree - activity         0.0000  (     NA   )   -1.0807

Overall maximum convergence ratio:    0.1935


Score test for 1 parameter:
chi-squared = 5.52, p = 0.0188.

Total of 395 iteration steps.

> score.Test(ans, 4)
Tested effects:
 outdegree - activity eval 
chi-squared = 5.52, d.f. = 1; one-sided Z = 2.35; two-sided p = 0.019. 
> ##test6
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c,  nsub=2, n3=50,
+                        cond=FALSE, doubleAveraging=0,seed=5)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> print('test6')
[1] "test6"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0451  ( 0.5078   )    0.0103   
  2. eval outdegree (density)         -1.1448  ( 0.1690   )   -0.2193   
  3. eval reciprocity                  1.7883  ( 0.3820   )   -0.0597   

Overall maximum convergence ratio:    0.2334 


Total of 588 iteration steps.

> myeff <- includeEffects(myeff, recip, include=FALSE)
[1] effectName   include      fix          test         initialValue
[6] parm        
<0 rows> (or 0-length row.names)
> myeff <- includeEffects(myeff, recip, type='endow')
  effectName  include fix   test  initialValue parm type 
1 reciprocity TRUE    FALSE FALSE          0   0    endow
> myeff <- includeEffects(myeff, recip, type='creation')
  effectName  include fix   test  initialValue parm type    
1 reciprocity TRUE    FALSE FALSE          0   0    creation
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                       Estimate   Standard   Convergence 
                                                    Error      t-ratio   
  1. rate  basic rate parameter mynet1  3.1508  ( 0.5674   )   -0.0293   
  2. eval  outdegree (density)         -1.0976  ( 0.1952   )   -0.0648   
  3. endow reciprocity                  2.3709  ( 0.9090   )    0.0125   
  4. creat reciprocity                  1.0175  ( 0.7842   )   -0.0142   

Overall maximum convergence ratio:    0.0827 


Total of 595 iteration steps.

> testSame.RSiena(ans, 3, 4)
Tested effects:
 reciprocity endow  ==  reciprocity creation 
chi-squared = 0.91, d.f. = 1; one-sided Z = 0.95; two-sided p = 0.341. 
> ##test7
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c,  nsub=2, n3=50,
+                        cond=FALSE,  diagonalize=0.5, seed=5)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> print('test7')
[1] "test7"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0258  ( 0.5063   )   -0.1656   
  2. eval outdegree (density)         -1.1558  ( 0.1821   )    0.0801   
  3. eval reciprocity                  1.8464  ( 0.3633   )    0.2701   

Overall maximum convergence ratio:    0.3630 


Total of 545 iteration steps.

> ##test8
> mymodel<- model.create(fn = simstats0c,  nsub=1, n3=50,
+                        cond=TRUE, condvarno=1, seed=5)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> print('test8')
[1] "test8"
> ans <- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.0998  ( 0.5110   )             

Other parameters: 
  1. eval outdegree (density) -1.1509  ( 0.2244   )   -0.1080   
  2. eval reciprocity          1.7982  ( 0.4363   )    0.0185   

Overall maximum convergence ratio:    0.1564 


Total of 240 iteration steps.

> ##test9
> mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
> mynet2 <- sienaDependent(s50a,type='behavior')
> mydata <- sienaDataCreate(mynet1, mynet2)
> myeff <- getEffects(mydata)
> myeff <- setEffect(myeff, linear, initialValue=0.34699930338, name="mynet2")
  effectName          include fix   test  initialValue parm
1 mynet2 linear shape TRUE    FALSE FALSE      0.347   0   
> myeff <- setEffect(myeff, avAlt, name="mynet2", interaction1="mynet1")
  effectName           include fix   test  initialValue parm
1 mynet2 average alter TRUE    FALSE FALSE          0   0   
> ##myeff$initialValue[98] <- 0.34699930338 ## siena3 starting values differ
> ##test10
> print('test10')
[1] "test10"
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE,
+                parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                                  Estimate   Standard   Convergence 
                                                               Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter cond. variable period 1  6.0629  ( 1.2683   )             
  0.2      Rate parameter cond. variable period 2  4.4421  ( 0.6116   )             

Other parameters: 
Network Dynamics 
  1.  eval outdegree (density)                    -2.4172  ( 0.1896   )   -0.0951   
  2.  eval reciprocity                             2.9130  ( 0.3222   )    0.0078   

Behavior Dynamics
  3.  rate rate mynet2 (period 1)                  1.3101  ( 0.4665   )    0.0888   
  4.  rate rate mynet2 (period 2)                  1.6253  ( 0.5829   )   -0.0653   
  5.  eval mynet2 linear shape                     0.4125  ( 0.2154   )   -0.0459   
  6.  eval mynet2 quadratic shape                 -0.5443  ( 0.4127   )   -0.0480   
  7.  eval mynet2 average alter                    1.2691  ( 1.1516   )   -0.0736   

Overall maximum convergence ratio:    0.2577 


Total of 335 iteration steps.

> ##test11
> print('test11')
[1] "test11"
> mymodel<- model.create(fn = simstats0c,  nsub=1, n3=50,
+                        behModelType=c(mynet2=2), seed=6)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> (ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE,
+                parallelTesting=TRUE, silent=TRUE))
Estimates, standard errors and convergence t-ratios

                                          Estimate   Standard   Convergence 
                                                       Error      t-ratio   
Network Dynamics 
  1. rate constant mynet1 rate (period 1)  5.7911  ( 1.8273   )   -0.2276   
  2. rate constant mynet1 rate (period 2)  4.5005  ( 0.8629   )   -0.1708   
  3. eval outdegree (density)             -2.3618  ( 0.1201   )   -0.2746   
  4. eval reciprocity                      2.8187  ( 0.1675   )   -0.2688   

Behavior Dynamics
  5. rate rate mynet2 (period 1)           1.3221  ( 0.4155   )    0.0399   
  6. rate rate mynet2 (period 2)           1.7863  ( 0.5585   )   -0.0260   
  7. eval mynet2 linear shape              0.3724  ( 0.2906   )   -0.0873   
  8. eval mynet2 quadratic shape          -0.5723  ( 0.3959   )   -0.1168   
  9. eval mynet2 average alter             1.2012  ( 0.7552   )    0.0420   

Overall maximum convergence ratio:    0.5329 


 Behavioral Model Type:
mynet2 : Boundary-absorbing behavior model 


Total of 340 iteration steps.

> ##test12
> print('test12')
[1] "test12"
> use<- 1:30
> mynet1 <- sienaDependent(array(c(s501[use,], s502[use,], s503[use,]),
+                          dim=c(length(use), 50,3)), type='bipartite',
+                          nodeSet=c('Senders','receivers'))
> receivers <- sienaNodeSet(50,'receivers')
> senders <- sienaNodeSet(30,'Senders')
> myvar1 <- coCovar(s50a[1:30,2], nodeSet='Senders')
> mydata <- sienaDataCreate(mynet1, myvar1, nodeSets=list(senders, receivers))
> myeff <- getEffects(mydata)
> myeff <- includeEffects(myeff, inPop)
  effectName            include fix   test  initialValue parm
1 indegree - popularity TRUE    FALSE FALSE          0   0   
> myeff <- setEffect(myeff, altInDist2, interaction1="myvar1", parameter=1)
  effectName             include fix   test  initialValue parm
1 myvar1 in-alter dist 2 TRUE    FALSE FALSE          0   1   
> ans <- siena07(sienaModelCreate(n3=50, nsub=2, seed=1),
+                data=mydata, effects=myeff, batch=TRUE, silent=TRUE)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> ans
Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1  3.6549  (  0.5402  )             
  0.2      Rate parameter period 2  2.7936  (  0.4046  )             

Other parameters: 
  1.  eval outdegree (density)      2.6894  (  5.1633  )    0.7569   
  2.  eval indegree - popularity   -3.4982  (  3.1025  )    0.8662   
  3.  eval myvar1 in-alter dist 2  33.4085  ( 10.8879  )   -2.1192   

Overall maximum convergence ratio:    7.2880 


Total of 588 iteration steps.

> tt <- sienaTimeTest(ans)
> summary(tt)
Joint significance test of time heterogeneity:
chi-squared =   4.24, d.f. = 3, p= 0.2365, 
where H0: The following parameters are zero:
 (1) (*)Dummy2:outdegree (density)
 (2) (*)Dummy2:indegree - popularity
 (3) (*)Dummy2:myvar1 in-alter dist 2

Individual significance tests and one-step estimators:
                                 Initial Est. One Step Est. p-Value  
outdegree (density)                 2.6894      15.2890        0.6020
indegree - popularity              -3.4982     -16.1684        0.2600
myvar1 in-alter dist 2             33.4085     142.5361        0.0020
(*)Dummy2:outdegree (density)       0.0000     -17.8685        0.5020
(*)Dummy2:indegree - popularity     0.0000      22.3587        0.1800
(*)Dummy2:myvar1 in-alter dist 2    0.0000    -214.6286        0.0520

Effect-wise joint significance tests
(i.e. each effect across all dummies):
                       chi-sq. df p-value
outdegree (density)       0.45  1   0.502
indegree - popularity     1.80  1   0.180
myvar1 in-alter dist 2    3.77  1   0.052

Period-wise joint significance tests
(i.e. each period across all parameters):
         chi-sq. df p-value
Period 1    4.24  3   0.237
Period 2    4.24  3   0.237

Use the following indices for plotting:
  (1) outdegree (density)
  (2) indegree - popularity
  (3) myvar1 in-alter dist 2

If you would like to fit time dummies to your model,
use the includeTimeDummy function.
Type "?sienaTimeTest" for more information on this output.
> ##test13
> print('test13')
[1] "test13"
> use<- 1:30
> mynet1 <- sienaDependent(array(c(s502[,use], s503[,use]),
+                          dim=c(50, length(use), 2)), type='bipartite',
+                          nodeSet=c('Senders','receivers'))
> receivers <- sienaNodeSet(30,'receivers')
> senders <- sienaNodeSet(50,'Senders')
> myvar1 <- coCovar(s50a[1:50,2], nodeSet='Senders')
> mydata <- sienaDataCreate(mynet1, myvar1, nodeSets=list(senders, receivers))
> myeff <- getEffects(mydata)
> myeff <- setEffect(myeff, altInDist2, interaction1="myvar1", parameter=1)
  effectName             include fix   test  initialValue parm
1 myvar1 in-alter dist 2 TRUE    FALSE FALSE          0   1   
> myeff <- setEffect(myeff, egoX, interaction1="myvar1")
  effectName include fix   test  initialValue parm
1 myvar1 ego TRUE    FALSE FALSE          0   0   
> (ans <- siena07(sienaModelCreate(n3=50, nsub=2, seed=1),
+                data=mydata, effects=myeff, batch=TRUE, silent=TRUE))
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
Estimates, standard errors and convergence t-ratios

                                 Estimate   Standard   Convergence 
                                              Error      t-ratio   

Rate parameters: 
  0       Rate parameter          1.8747  ( 0.3077   )             

Other parameters: 
  1. eval outdegree (density)    -1.8071  ( 0.1798   )    0.0536   
  2. eval myvar1 ego              0.3003  ( 0.1138   )   -0.0517   
  3. eval myvar1 in-alter dist 2 -0.0569  ( 0.1678   )   -0.0475   

Overall maximum convergence ratio:    0.0766 


Total of 588 iteration steps.

> ##test14
> print('test14')
[1] "test14"
> net <- sienaDependent(array(c(tmp3, tmp4), dim=c(32, 32, 2)))
> dataset <- sienaDataCreate(net)
> myeff <- getEffects(dataset)
> myeff <- includeEffects(myeff, inPop)
  effectName            include fix   test  initialValue parm
1 indegree - popularity TRUE    FALSE FALSE          0   0   
> algo <- sienaAlgorithmCreate(nsub=1, n3=20, maxlike=TRUE, seed=15, mult=1)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> (ans <- siena07(algo, data=dataset, effects=myeff, batch=TRUE, silent=TRUE))
Estimated by Maximum Likelihood

Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   
  1. rate basic rate parameter net  3.7816  ( 0.4178   )   0.6167    
  2. eval outdegree (density)      -1.5840  ( 0.3353   )   2.9602    
  3. eval reciprocity               1.8606  ( 0.2314   )   1.4786    
  4. eval indegree - popularity     0.1082  ( 0.0440   )   2.5318    

Overall maximum convergence ratio:    4.7198 


Total of 266 iteration steps.

> ##test 15
> print('test15')
[1] "test15"
> mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
> mynet2 <- sienaDependent(s50a,type='behavior')
> mydata <- sienaDataCreate(mynet1, mynet2)
> myeff <- getEffects(mydata)
> (myeff <- includeEffects(myeff, transTrip))
  effectName          include fix   test  initialValue parm
1 transitive triplets TRUE    FALSE FALSE          0   0   
  name   effectName                      include fix   test  initialValue parm
1 mynet1 constant mynet1 rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2 mynet1 constant mynet1 rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3 mynet1 outdegree (density)             TRUE    FALSE FALSE   -1.46770   0   
4 mynet1 reciprocity                     TRUE    FALSE FALSE    0.00000   0   
5 mynet1 transitive triplets             TRUE    FALSE FALSE    0.00000   0   
6 mynet2 rate mynet2 (period 1)          TRUE    FALSE FALSE    0.70571   0   
7 mynet2 rate mynet2 (period 2)          TRUE    FALSE FALSE    0.84939   0   
8 mynet2 mynet2 linear shape             TRUE    FALSE FALSE    0.32237   0   
9 mynet2 mynet2 quadratic shape          TRUE    FALSE FALSE    0.00000   0   
> (myeff <- includeEffects(myeff, egoX, simX, interaction1="mynet2"))
  effectName        include fix   test  initialValue parm
1 mynet2 ego        TRUE    FALSE FALSE          0   0   
2 mynet2 similarity TRUE    FALSE FALSE          0   0   
   name   effectName                      include fix   test  initialValue parm
1  mynet1 constant mynet1 rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2  mynet1 constant mynet1 rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3  mynet1 outdegree (density)             TRUE    FALSE FALSE   -1.46770   0   
4  mynet1 reciprocity                     TRUE    FALSE FALSE    0.00000   0   
5  mynet1 transitive triplets             TRUE    FALSE FALSE    0.00000   0   
6  mynet1 mynet2 ego                      TRUE    FALSE FALSE    0.00000   0   
7  mynet1 mynet2 similarity               TRUE    FALSE FALSE    0.00000   0   
8  mynet2 rate mynet2 (period 1)          TRUE    FALSE FALSE    0.70571   0   
9  mynet2 rate mynet2 (period 2)          TRUE    FALSE FALSE    0.84939   0   
10 mynet2 mynet2 linear shape             TRUE    FALSE FALSE    0.32237   0   
11 mynet2 mynet2 quadratic shape          TRUE    FALSE FALSE    0.00000   0   
> (myeff <- includeEffects(myeff, avSim, name="mynet2", interaction1="mynet1"))
  effectName                include fix   test  initialValue parm
1 mynet2 average similarity TRUE    FALSE FALSE          0   0   
   name   effectName                      include fix   test  initialValue parm
1  mynet1 constant mynet1 rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2  mynet1 constant mynet1 rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3  mynet1 outdegree (density)             TRUE    FALSE FALSE   -1.46770   0   
4  mynet1 reciprocity                     TRUE    FALSE FALSE    0.00000   0   
5  mynet1 transitive triplets             TRUE    FALSE FALSE    0.00000   0   
6  mynet1 mynet2 ego                      TRUE    FALSE FALSE    0.00000   0   
7  mynet1 mynet2 similarity               TRUE    FALSE FALSE    0.00000   0   
8  mynet2 rate mynet2 (period 1)          TRUE    FALSE FALSE    0.70571   0   
9  mynet2 rate mynet2 (period 2)          TRUE    FALSE FALSE    0.84939   0   
10 mynet2 mynet2 linear shape             TRUE    FALSE FALSE    0.32237   0   
11 mynet2 mynet2 quadratic shape          TRUE    FALSE FALSE    0.00000   0   
12 mynet2 mynet2 average similarity       TRUE    FALSE FALSE    0.00000   0   
> (myeff <- includeGMoMStatistics(myeff, simX_gmm, interaction1="mynet2"))
    name shortName type include
1 mynet1  simX_gmm  gmm    TRUE

 Effects and statistics for estimation by the Generalized Method of Moments

 Effects
   name   effectName                      include fix   test  initialValue parm
1  mynet1 constant mynet1 rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2  mynet1 constant mynet1 rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3  mynet1 outdegree (density)             TRUE    FALSE FALSE   -1.46770   0   
4  mynet1 reciprocity                     TRUE    FALSE FALSE    0.00000   0   
5  mynet1 transitive triplets             TRUE    FALSE FALSE    0.00000   0   
6  mynet1 mynet2 ego                      TRUE    FALSE FALSE    0.00000   0   
7  mynet1 mynet2 similarity               TRUE    FALSE FALSE    0.00000   0   
8  mynet2 rate mynet2 (period 1)          TRUE    FALSE FALSE    0.70571   0   
9  mynet2 rate mynet2 (period 2)          TRUE    FALSE FALSE    0.84939   0   
10 mynet2 mynet2 linear shape             TRUE    FALSE FALSE    0.32237   0   
11 mynet2 mynet2 quadratic shape          TRUE    FALSE FALSE    0.00000   0   
12 mynet2 mynet2 average similarity       TRUE    FALSE FALSE    0.00000   0   
   type
1  rate
2  rate
3  eval
4  eval
5  eval
6  eval
7  eval
8  rate
9  rate
10 eval
11 eval
12 eval

 Regular and GMoM statistics
   name   effectName                      Statistic
1  mynet1 constant mynet1 rate (period 1) Regular  
2  mynet1 constant mynet1 rate (period 2) Regular  
3  mynet1 outdegree (density)             Regular  
4  mynet1 reciprocity                     Regular  
5  mynet1 transitive triplets             Regular  
6  mynet1 mynet2 ego                      Regular  
7  mynet1 mynet2 similarity               Regular  
8  mynet2 rate mynet2 (period 1)          Regular  
9  mynet2 rate mynet2 (period 2)          Regular  
10 mynet2 mynet2 linear shape             Regular  
11 mynet2 mynet2 quadratic shape          Regular  
12 mynet2 mynet2 average similarity       Regular  
13 mynet1 mynet2 similarity               GMoM     
> algo <- sienaAlgorithmCreate(nsub=1, n3=100, gmm=TRUE, seed=6)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> (ans <- siena07(algo, data=mydata, effects=myeff, batch=TRUE,
+                 parallelTesting=TRUE, silent=TRUE))
Estimated by Generalized Method of Moments

Estimates, standard errors and convergence t-ratios

                                           Estimate   Standard   Convergence 
                                                        Error      t-ratio   
Network Dynamics 
   1. rate constant mynet1 rate (period 1)  5.6736  ( 0.6951   )   -0.7532   
   2. rate constant mynet1 rate (period 2)  4.3793  ( 0.7939   )   -0.2401   
   3. eval outdegree (density)             -2.5281  ( 0.1238   )    3.0663   
   4. eval reciprocity                      2.7731  ( 0.2046   )    3.2600   
   5. eval transitive triplets              0.4332  ( 0.0824   )   -0.8205   
   6. eval mynet2 ego                       0.0220  ( 0.0772   )    1.7040   
   7. eval mynet2 similarity                0.8670  ( 0.3446   )    1.4465   

Behavior Dynamics
   8. rate rate mynet2 (period 1)           1.2663  ( 0.3007   )    1.0844   
   9. rate rate mynet2 (period 2)           1.6833  ( 0.3537   )   -0.9834   
  10. eval mynet2 linear shape              0.3607  ( 0.2267   )    0.5830   
  11. eval mynet2 quadratic shape          -0.1885  ( 0.1240   )   -0.8490   
  12. eval mynet2 average similarity        1.4133  ( 1.6348   )   -0.1432   

Overall maximum convergence ratio:    5.7962 


Total of 757 iteration steps.

> ##test16
> print('test16')
[1] "test16"
> set.seed(123) # simulate behavior data according to dZ(t) = [-0.1 Z + 1] dt + 1 dW(t)
> y1 <- rnorm(50, 0,3)
> y2 <- exp(-0.1) * y1 + (1-exp(-0.1)) * 1/ -0.1 + rnorm(50, 0, (exp(-0.2)- 1) / -0.2 * 1^2)
> friend <- sienaDependent(array(c(s501, s502), dim = c(50,50,2)))
> behavior <- sienaDependent(matrix(c(y1,y2), 50,2), type = "continuous")
> (mydata <- sienaDataCreate(friend, behavior))
Dependent variables:  friend, behavior
Number of observations: 2

Nodeset                  Actors
Number of nodes              50

Dependent variable friend
Type               oneMode
Observations       2
Nodeset            Actors
Densities          0.046 0.047

Dependent variable behavior
Type               continuous
Observations       2
Nodeset            Actors
Range              -6.242 - 6.507

> (myeff <- getEffects(mydata, onePeriodSde = TRUE))
SDE init parameters:  -0.1117176 -0.864023 0.8576913
SDE par stand errors: 0.04669358 0.1223113 0.08791327
  name     effectName                  include fix   test  initialValue parm
1 friend   basic rate parameter friend TRUE    FALSE FALSE    4.69604   0
2 friend   outdegree (density)         TRUE    FALSE FALSE   -1.48852   0
3 friend   reciprocity                 TRUE    FALSE FALSE    0.00000   0
4 sde      scale parameter period 1    TRUE    TRUE  FALSE    1.00000   0
5 behavior wiener (behavior.behavior)  TRUE    FALSE FALSE    0.85769   0
6 behavior feedback from behavior      TRUE    FALSE FALSE   -0.11172   0
7 behavior intercept                   TRUE    FALSE FALSE   -0.86402   0
> algorithmMoM <- sienaAlgorithmCreate(nsub=1, n3=20, seed=321)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> # (ans <- siena07(algorithmMoM, data = mydata, effects = myeff, batch=TRUE))
> ##test17
> print('test17')
[1] "test17"
> mynet <- sienaNet(array(c(s501, s502), dim=c(50, 50, 2)))
> sm1 <- 1*(s50s[,2] >= 2)
> sm2 <- 1*(s50s[,3] >= 2)
> sm2 <- pmax(sm1,sm2)
> sm2[c(33,28,29,44)] <- 1
> mybeh <- sienaDependent(cbind(sm1,sm2), type="behavior")
> (mydata <- sienaDataCreate(mynet, mybeh))
For some variables, in some periods, there are only increases, or only decreases.
This will be respected in the simulations.
If this is not desired, use allowOnly=FALSE when creating the dependent variables.
Dependent variables:  mynet, mybeh 
Number of observations: 2 

Nodeset                  Actors 
Number of nodes              50 

Dependent variable mynet      
Type               oneMode    
Observations       2          
Nodeset            Actors     
Densities          0.046 0.047

Dependent variable mybeh   
Type               behavior
Observations       2       
Nodeset            Actors  
Range              0 - 1   

"uponly":  mybeh:    all periods
> mymodel <- sienaModelCreate(projname=NULL, seed=1234, firstg=0.001, nsub=1, n3=10)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> myeff <- getEffects(mydata)
> (myeff <- setEffect(myeff,avExposure,type='rate',parameter=2,
+ 							name='mybeh',interaction1='mynet'))
  effectName                            include fix   test  initialValue parm
1 average exposure effect on rate mybeh TRUE    FALSE FALSE          0   2   
  name  effectName                            include fix   test  initialValue
1 mynet basic rate parameter mynet            TRUE    FALSE FALSE    4.69604  
2 mynet outdegree (density)                   TRUE    FALSE FALSE   -1.48852  
3 mynet reciprocity                           TRUE    FALSE FALSE    0.00000  
4 mybeh rate mybeh period 1                   TRUE    FALSE FALSE    0.26000  
5 mybeh average exposure effect on rate mybeh TRUE    FALSE FALSE    0.00000  
  parm
1 0   
2 0   
3 0   
4 0   
5 2   
> (ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE))

Start phase 0 
theta:  4.70 -1.49  0.00  0.26  0.00 

Start phase 1 
Phase 1 Iteration 1 Progress: 0%
Phase 1 Iteration 2 Progress: 0%
Phase 1 Iteration 3 Progress: 1%
Phase 1 Iteration 4 Progress: 1%
Phase 1 Iteration 5 Progress: 1%
Phase 1 Iteration 10 Progress: 2%
Phase 1 Iteration 15 Progress: 3%
Phase 1 Iteration 20 Progress: 4%
Phase 1 Iteration 25 Progress: 5%
Phase 1 Iteration 30 Progress: 6%
Phase 1 Iteration 35 Progress: 6%
Phase 1 Iteration 40 Progress: 7%
Phase 1 Iteration 45 Progress: 8%
Phase 1 Iteration 50 Progress: 9%
theta:  4.69767 -1.48890  0.00164  0.26062  0.00473 

Start phase 2.1
Phase 2 Subphase 1 Iteration 1 Progress: 56%
Phase 2 Subphase 1 Iteration 2 Progress: 56%
theta  4.69931 -1.48925  0.00370  0.26134  0.00668 
ac 1.709 0.869 1.000 1.285 1.531 
Phase 2 Subphase 1 Iteration 3 Progress: 56%
Phase 2 Subphase 1 Iteration 4 Progress: 56%
theta  4.7038 -1.4905  0.0104  0.2634  0.0116 
ac 1.908 1.314 0.964 1.161 0.808 
Phase 2 Subphase 1 Iteration 5 Progress: 56%
Phase 2 Subphase 1 Iteration 6 Progress: 57%
theta  4.7103 -1.4919  0.0180  0.2654  0.0192 
ac 1.258 0.644 0.998 1.133 0.782 
Phase 2 Subphase 1 Iteration 7 Progress: 57%
Phase 2 Subphase 1 Iteration 8 Progress: 57%
theta  4.7166 -1.4933  0.0257  0.2676  0.0272 
ac 1.309 0.694 0.967 1.304 0.848 
Phase 2 Subphase 1 Iteration 9 Progress: 57%
Phase 2 Subphase 1 Iteration 10 Progress: 57%
theta  4.7231 -1.4948  0.0337  0.2695  0.0356 
ac 1.263 0.768 0.997 0.806 0.864 
theta  5.031 -1.577  0.464  0.373  0.451 
ac 0.904 0.940 0.987 0.626 0.676 
theta:  5.031 -1.577  0.464  0.373  0.451 

Start phase 3 
Estimates, standard errors and convergence t-ratios

                                                Estimate   Standard   Convergence 
                                                             Error      t-ratio   
Network Dynamics 
  1. rate basic rate parameter mynet             5.0309  ( 1.8002   )    3.1556   
  2. eval outdegree (density)                   -1.5767  ( 0.1300   )    1.7004   
  3. eval reciprocity                            0.4639  ( 0.3817   )   -6.0068   

Behavior Dynamics
  4. rate rate mybeh period 1                    0.3731  ( 0.2364   )   -1.2577   
  5. rate average exposure effect on rate mybeh  0.4511  ( 1.4274   )   -3.5793   

Overall maximum convergence ratio:   13.9256 


Total of 290 iteration steps.

> ##test18
> print('test18')
[1] "test18"
> myalgorithm <- sienaAlgorithmCreate(nsub=1, n3=10, seed=1293)
If you use this algorithm object, siena07 will create/use an output file Siena.txt .
> mynet1 <- sienaDependent(array(c(tmp3, tmp4), dim=c(32, 32, 2)))
> cova <- coCovar(1:32)
> cova2 <- coCovar(rep(0,32), warn=FALSE)
> mydata <- sienaDataCreate(mynet1, cova)
> mydata2 <- sienaDataCreate(mynet1, cova=cova2)
> mygroup <- sienaGroupCreate(list(mydata,mydata2))
> myeff <- getEffects(mygroup)
> myeff <- setEffect(myeff, simX, interaction1='cova')
  effectName      include fix   test  initialValue parm
1 cova similarity TRUE    FALSE FALSE          0   0   
> (ans <- siena07(myalgorithm, data=mygroup, effects=myeff, batch=TRUE))

Start phase 0 
theta: -0.56  0.00  0.00 

Start phase 1 
Phase 1 Iteration 1 Progress: 0%
Phase 1 Iteration 2 Progress: 0%
Phase 1 Iteration 3 Progress: 1%
Phase 1 Iteration 4 Progress: 1%
Phase 1 Iteration 5 Progress: 1%
Phase 1 Iteration 10 Progress: 2%
Phase 1 Iteration 15 Progress: 3%
Phase 1 Iteration 20 Progress: 5%
Phase 1 Iteration 25 Progress: 6%
Phase 1 Iteration 30 Progress: 7%
Phase 1 Iteration 35 Progress: 8%
Phase 1 Iteration 40 Progress: 9%
Phase 1 Iteration 45 Progress: 10%
Phase 1 Iteration 50 Progress: 11%
theta: -0.6269  0.2876 -0.0143 

Start phase 2.1
Phase 2 Subphase 1 Iteration 1 Progress: 46%
Phase 2 Subphase 1 Iteration 2 Progress: 46%
theta -0.7100  0.6120 -0.0334 
ac -8.587  0.918 -3.708 
Phase 2 Subphase 1 Iteration 3 Progress: 47%
Phase 2 Subphase 1 Iteration 4 Progress: 47%
theta -0.893  1.483 -0.101 
ac  1.221  0.941 -2.293 
Phase 2 Subphase 1 Iteration 5 Progress: 47%
Phase 2 Subphase 1 Iteration 6 Progress: 47%
theta -1.040  1.938 -0.123 
ac 1.598 0.682 0.774 
Phase 2 Subphase 1 Iteration 7 Progress: 48%
Phase 2 Subphase 1 Iteration 8 Progress: 48%
theta -1.113  2.036 -0.122 
ac 0.548 0.681 0.433 
Phase 2 Subphase 1 Iteration 9 Progress: 48%
Phase 2 Subphase 1 Iteration 10 Progress: 48%
theta -1.1462  2.0525 -0.0622 
ac 0.467 0.678 0.461 
theta -1.14850  1.81475  0.00267 
ac  0.00745 -0.00359  0.01501 
theta: -1.14850  1.81475  0.00267 

Start phase 3 
Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1  3.1050  ( 0.4096   )             
  0.2      Rate parameter period 2  3.4061  ( 0.5843   )             

Other parameters: 
  1.  eval outdegree (density)     -1.1485  ( 1.1638   )   -0.4229   
  2.  eval reciprocity              1.8147  ( 0.9422   )   -0.1142   
  3.  eval cova similarity          0.0027  ( 1.9694   )   -0.4641   

Overall maximum convergence ratio:    0.5163 


Total of 285 iteration steps.

> ## delete output file
> if (file.exists('Siena.txt')){unlink('Siena.txt')}
> 
> proc.time()
   user  system elapsed 
  13.17    0.25   13.64 
