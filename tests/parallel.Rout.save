
R version 2.14.2 (2012-02-29)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-apple-darwin9.8.0/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(RSiena)
> print(packageDescription("RSiena",fields="Repository/R-Forge/Revision"))
[1] NA
> 
> ##test3
> mynet1 <- sienaNet(array(c(tmp3, tmp4),dim=c(32, 32, 2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(findiff=TRUE, fn = simstats0c, projname='test3',
+                        cond=FALSE, nsub=2, n3=100)
> print('test3')
[1] "test3"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE, parallelTesting=TRUE, silent=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0264  ( 0.5202   )   -0.0780   
  2. eval outdegree (density)         -1.1343  ( 0.1653   )    0.1078   
  3. eval reciprocity                  1.7921  ( 0.2370   )   -0.0392   

Total of 604 iteration steps.

> ##test4
> mymodel$projname <- 'test4'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> print('test4')
[1] "test4"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.0428  ( 0.5235   )             
  1. eval outdegree (density) -1.0952  ( 0.1923   )    0.2216   
  2. eval reciprocity          1.7007  ( 0.3089   )   -0.0419   

Total of 390 iteration steps.

> ##test7
> mynet1 <- sienaNet(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test7', nsub=2, n3=100,
+                        cond=FALSE)
> print('test7')
[1] "test7"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.1122  ( 0.4077   )   0.1685    
  2. eval outdegree (density)         -1.1288  ( 0.2181   )   0.1968    
  3. eval reciprocity                  1.7487  ( 0.4069   )   0.1410    

Total of 404 iteration steps.

> ##test8
> mymodel$projname <- 'test8'
> mymodel$cconditional <- TRUE
> mymodel$condvarno <- 1
> print('test8')
[1] "test8"
> ans <- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.1368  ( 0.4867   )             
  1. eval outdegree (density) -1.1224  ( 0.2040   )    0.0346   
  2. eval reciprocity          1.7395  ( 0.2947   )   -0.0548   

Total of 269 iteration steps.

> ##test9
> 
> mynet1 <- sienaNet(array(c(s501, s502, s503), dim=c(50, 50, 3)))
> mynet2 <- sienaNet(s50a,type='behavior')
> mydata <- sienaDataCreate(mynet1, mynet2)
> myeff <- getEffects(mydata)
> myeff <- setEffect(myeff, linear, initialValue=0.34699930338, name="mynet2")
                    name shortName type interaction1 interaction2 include parm
mynet2.obj.eval.1 mynet2    linear eval                              TRUE    0
                    fix  test initialValue timeDummy period group
mynet2.obj.eval.1 FALSE FALSE    0.3469993         ,   <NA>     1
> ##myeff$initialValue[98] <- 0.34699930338 ## siena3 starting values differ
> ##test10
> print('test10')
[1] "test10"
> mymodel$projname <- 'test10'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE,
+                parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                                  Estimate   Standard   Convergence 
                                                               Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter cond. variable period 1  5.7677  ( 0.8719   )             
  0.2      Rate parameter cond. variable period 2  4.5201  ( 0.6091   )             

Other parameters: 
Network Dynamics 
  1.  eval outdegree (density)                    -2.3554  ( 0.1091   )    0.0029   
  2.  eval reciprocity                             2.8153  ( 0.1977   )   -0.1256   

Behavior Dynamics
  3.  rate rate mynet2 (period 1)                  1.1513  ( 0.3424   )   -0.1756   
  4.  rate rate mynet2 (period 2)                  1.6605  ( 0.7096   )   -0.0367   
  5.  eval behavior mynet2 linear shape            0.3562  ( 0.1611   )   -0.1898   
  6.  eval behavior mynet2 quadratic shape        -0.1998  ( 0.1005   )    0.0724   

Total of 371 iteration steps.

> ##test11
> print('test11')
[1] "test11"
> data501 <- sienaDataCreateFromSession("s50.csv", modelName="s50")
> data501e <- sienaDataCreateFromSession("s50e.csv", modelName="s50e")
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
> data501paj <- sienaDataCreateFromSession("s50paj.csv", modelName="s50paj")
Loading required package: network
network: Classes for Relational Data
Version 1.7-1 created on March 1, 2012.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of Washington
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
> 
> model501e <- model.create( projname="s50e", cond=FALSE, nsub=2, n3=100 )
> ans501e <- siena07(model501e, data=data501e$mydata, effects=data501e$myeff,
+                    parallelTesting=TRUE, batch=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans501e
Estimates, standard errors and convergence t-ratios

                                        Estimate   Standard   Convergence 
                                                     Error      t-ratio   
  1. rate constant Var1 rate (period 1)  5.7725  ( 0.9854   )    0.0309   
  2. rate constant Var1 rate (period 2)  4.5252  ( 1.2071   )    0.0524   
  3. eval outdegree (density)           -2.3255  ( 0.1206   )   -0.0389   
  4. eval reciprocity                    2.7484  ( 0.1998   )   -0.1203   

Total of 614 iteration steps.

> ##test12
> print('test12')
[1] "test12"
> use<- 1:30
> mynet1 <- sienaNet(array(c(s501[use,], s502[use,], s503[use,]),
+                          dim=c(length(use), 50,3)), type='bipartite',
+                          nodeSet=c('Senders','receivers'))
> receivers <- sienaNodeSet(50,'receivers')
> senders <- sienaNodeSet(30,'Senders')
> mydata <- sienaDataCreate(mynet1, nodeSets=list(senders, receivers))
> myeff <- getEffects(mydata)
> myeff <- includeEffects(myeff,  inPop)
                    name shortName type interaction1 interaction2 include
mynet1.obj.eval.3 mynet1     inPop eval                              TRUE
> ans <- siena07(sienaModelCreate(n3=100,nsub=2, seed=1, projname="test12"),
+                data=mydata, effects=myeff, batch=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1  4.2553  ( 0.6363   )             
  0.2      Rate parameter period 2  3.5608  ( 0.5237   )             

Other parameters: 
  1.  eval outdegree (density)     -1.7724  ( 0.1924   )    0.1217   
  2.  eval indegree - popularity    0.0560  ( 0.0668   )   -0.1674   

Total of 210 iteration steps.

> tt <- sienaTimeTest(ans)
> 
