
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(RSiena)
> 
> ##test3
> mynet1 <- sienaDependent(array(c(tmp3, tmp4),dim=c(32, 32, 2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(findiff=TRUE, fn = simstats0c, projname='test3',
+                        cond=FALSE, nsub=2, n3=100, seed=3)
> print('test3')
[1] "test3"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE, parallelTesting=TRUE, silent=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  2.9953  ( 0.5597   )   -0.0277   
  2. eval outdegree (density)         -1.1126  ( 0.2222   )   -0.1278   
  3. eval reciprocity                  1.7219  ( 0.5378   )   -0.4073   

Total of 467 iteration steps.

> ##test4
> mymodel$projname <- 'test4'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> print('test4')
[1] "test4"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       2.9753  ( 0.4301   )             
  1. eval outdegree (density) -1.1180  ( 0.2385   )   0.2850    
  2. eval reciprocity          1.7762  ( 0.3425   )   0.1232    

Total of 432 iteration steps.

> ##test7
> mynet1 <- sienaDependent(array(c(tmp3,tmp4),dim=c(32,32,2)))
> mydata <- sienaDataCreate(mynet1)
> myeff<- getEffects(mydata)
> mymodel<- model.create(fn = simstats0c, projname='test7', nsub=2, n3=100,
+                        cond=FALSE, seed=5)
> print('test7')
[1] "test7"
> ans<- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                                      Estimate   Standard   Convergence 
                                                   Error      t-ratio   
  1. rate basic rate parameter mynet1  3.0243  ( 0.4224   )    0.0314   
  2. eval outdegree (density)         -1.1365  ( 0.2024   )   -0.0624   
  3. eval reciprocity                  1.7417  ( 0.4800   )   -0.2095   

Total of 438 iteration steps.

> ##test8
> mymodel$projname <- 'test8'
> mymodel$cconditional <- TRUE
> mymodel$condvarno <- 1
> print('test8')
[1] "test8"
> ans <- siena07(mymodel, data=mydata, effects=myeff,  batch=TRUE,
+               parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)#,dll='../siena/src/RSiena.dll')
> ans
Estimates, standard errors and convergence t-ratios

                              Estimate   Standard   Convergence 
                                           Error      t-ratio   

Rate parameters: 
  0       Rate parameter       3.057   ( 0.5090   )             
  1. eval outdegree (density) -1.145   ( 0.1815   )   0.1146    
  2. eval reciprocity          1.829   ( 0.3705   )   0.1111    

Total of 448 iteration steps.

> ##test9
> 
> mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
> mynet2 <- sienaDependent(s50a,type='behavior')
> mydata <- sienaDataCreate(mynet1, mynet2)
> myeff <- getEffects(mydata)
> myeff <- setEffect(myeff, linear, initialValue=0.34699930338, name="mynet2")
                    name shortName type interaction1 interaction2 include parm
mynet2.obj.eval.1 mynet2    linear eval                              TRUE    0
                    fix  test initialValue timeDummy period group
mynet2.obj.eval.1 FALSE FALSE    0.3469993         ,   <NA>     1
> ##myeff$initialValue[98] <- 0.34699930338 ## siena3 starting values differ
> ##test10
> print('test10')
[1] "test10"
> mymodel$projname <- 'test10'
> mymodel$cconditional <- TRUE
> mymodel$condvarno<- 1
> ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE,
+                parallelTesting=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                                  Estimate   Standard   Convergence 
                                                               Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter cond. variable period 1  5.7886  ( 0.9194   )             
  0.2      Rate parameter cond. variable period 2  4.4917  ( 0.7276   )             

Other parameters: 
Network Dynamics 
  1.  eval outdegree (density)                    -2.3921  ( 0.0994   )    0.0849   
  2.  eval reciprocity                             2.8767  ( 0.2007   )    0.1546   

Behavior Dynamics
  3.  rate rate mynet2 (period 1)                  1.1821  ( 0.3038   )   -0.1421   
  4.  rate rate mynet2 (period 2)                  1.6459  ( 0.3903   )   -0.0494   
  5.  eval behavior mynet2 linear shape            0.3902  ( 0.1749   )    0.1069   
  6.  eval behavior mynet2 quadratic shape        -0.2009  ( 0.1180   )   -0.0380   

Total of 658 iteration steps.

> ##test11
> print('test11')
[1] "test11"
> data501 <- sienaDataCreateFromSession("s50.csv", modelName="s50")
> data501e <- sienaDataCreateFromSession("s50e.csv", modelName="s50e")
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
> data501paj <- sienaDataCreateFromSession("s50paj.csv", modelName="s50paj")
Loading required package: network
network: Classes for Relational Data
Version 1.7.2 created on March 15, 2013.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of Washington
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
<sparse>[ <logic> ] : .M.sub.i.logical() maybe inefficient
> 
> model501e <- model.create( projname="s50e", cond=FALSE, nsub=2, n3=100, seed=6)
> ans501e <- siena07(model501e, data=data501e$mydata, effects=data501e$myeff,
+                    parallelTesting=TRUE, batch=TRUE, silent=TRUE)
> ##, verbose=TRUE)
> ans501e
Estimates, standard errors and convergence t-ratios

                                        Estimate   Standard   Convergence 
                                                     Error      t-ratio   
  1. rate constant Var1 rate (period 1)  5.6361  ( 0.9089   )   -0.0980   
  2. rate constant Var1 rate (period 2)  4.3568  ( 0.5558   )   -0.1748   
  3. eval outdegree (density)           -2.2984  ( 0.1036   )    0.0582   
  4. eval reciprocity                    2.7178  ( 0.1917   )   -0.1886   

Total of 453 iteration steps.

> ##test12
> print('test12')
[1] "test12"
> use<- 1:30
> mynet1 <- sienaDependent(array(c(s501[use,], s502[use,], s503[use,]),
+                          dim=c(length(use), 50,3)), type='bipartite',
+                          nodeSet=c('Senders','receivers'))
> receivers <- sienaNodeSet(50,'receivers')
> senders <- sienaNodeSet(30,'Senders')
> mydata <- sienaDataCreate(mynet1, nodeSets=list(senders, receivers))
> myeff <- getEffects(mydata)
> myeff <- includeEffects(myeff, inPop)
                    name shortName type interaction1 interaction2 include
mynet1.obj.eval.3 mynet1     inPop eval                              TRUE
> ans <- siena07(sienaModelCreate(n3=100, nsub=2,
+                seed=1, projname="test12"),
+                data=mydata, effects=myeff, batch=TRUE, silent=TRUE)
> ans
Estimates, standard errors and convergence t-ratios

                                   Estimate   Standard   Convergence 
                                                Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1  4.3087  ( 0.7045   )             
  0.2      Rate parameter period 2  3.5047  ( 0.5461   )             

Other parameters: 
  1.  eval outdegree (density)     -1.7031  ( 0.1585   )   0.5089    
  2.  eval indegree - popularity    0.0390  ( 0.0567   )   0.0464    

Total of 227 iteration steps.

> tt <- sienaTimeTest(ans)
> 
> proc.time()
   user  system elapsed 
  12.29    0.06   12.49 
