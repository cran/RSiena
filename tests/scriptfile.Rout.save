
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(error=NULL)
> set.seed(1)
> options(help_type='text')
> #print(.libPaths())
> options(pager='console')
> ###################################################################################
> ###
> ### ---- Rscript01DataFormat.R: a script for the introduction to RSiena -------------
> ###
> ###                               version: January 17, 2012
> ###################################################################################
> #
> # Rscript01DataFormat.R is followed by
> # RScriptSNADescriptives.R, code for descriptive analysis of the data, and
> # Rscript02SienaVariableFormat.R, which formats data and specifies the model, and
> # Rscript03SienaRunModel.R, which runs the model and estimates parameters
> # Rscript04SienaBehaviour.R, which illustrates an example of analysing the
> # coevolution of networks and behaviour
> #
> # The entire model fitting is summarised at the end of RscriptSienaRunModel.R
> # (without comments)
> #
> # This is an R script for getting started with RSiena, written by
> # Robin Gauthier, Tom Snijders, Ruth Ripley, Johan Koskinen, and
> # Paulina Preciado, with some examples borrowed from Christian Steglich.
> # Lines starting with # are not processed by R but treated as comments.
> # The script has a lot of explanation of R possibilities that will be
> # familiar for readers well acquainted with R, and can be skipped by them.
> #
> # There are various really easy online introductions to R. See, for example
> #
> #        http://www.statmethods.net/
> #        http://www.burns-stat.com/pages/Tutor/hints_R_begin.html
> #        http://data.princeton.edu/R/gettingStarted.html
> #        http://www.ats.ucla.edu/stat/R/sk/
> #
> # You can go to any of these sites to learn the basics of R
> # or refresh your knowledge.
> # There is a lot of documentation available at
> #        http://cran.xl-mirror.nl/other-docs.html
> # including some short introductions, handy reference cards,
> # and introductions in many languages besides English.
> #
> #
> # Some general points to note:
> #
> # R is case-sensitive. Be aware of capitalization!
> #
> # The left-arrow "<-" is very frequently used: it denotes an assignment,
> # "a <- b" meaning that object a gets the value b.
> # Often b is a complicated expression that has to be evaluated by R,
> # and computes a result that then is stored as the object a.
> #
> # Help within R can be called by typing a question mark and the name of the
> # function you need help for. For example
> # ?library
> # will bring up a file titled "loading and listing of packages".
> # Comments are made at the end of commands after #,
> # or in lines starting with # telling R to ignore everything beyond it.
> # That is why everything up to now in this file is on lines starting with #.
> #
> # This session will be using s50 data which are supposed to be
> # present in the working directory.
> # You can get them from
> #     http://www.stats.ox.ac.uk/~snijders/siena/siena_datasets.htm
> #
> # Any command in R is a function, and ends by parentheses
> # that enclose the arguments of the function,
> # or enclose nothing if no argument is needed, such as for the function q()
> # In general the command syntax for calling R's functions is function(x) where
> # function is a saved function and x the name of the object to be operated on.
> #
> #################### - CALLING THE DATA AND PRELIMINARY MANIPULATIONS - ###########
> 
> # The library command loads the packages needed during the session.
> 
>         library(RSiena)
> 
> # Some additional packages are used by RSiena,
> # the so-called required packages; these will be loaded automatically.
> 
> # You need to have INSTALLED all of them.
> 
> 	?install.packages
install.packages             package:utils             R Documentation

_I_n_s_t_a_l_l _P_a_c_k_a_g_e_s _f_r_o_m _R_e_p_o_s_i_t_o_r_i_e_s _o_r _L_o_c_a_l _F_i_l_e_s

_D_e_s_c_r_i_p_t_i_o_n:

     Download and install packages from CRAN-like repositories or from
     local files.

_U_s_a_g_e:

     install.packages(pkgs, lib, repos = getOption("repos"),
                      contriburl = contrib.url(repos, type),
                      method, available = NULL, destdir = NULL,
                      dependencies = NA, type = getOption("pkgType"),
                      configure.args = getOption("configure.args"),
                      configure.vars = getOption("configure.vars"),
                      clean = FALSE, Ncpus = getOption("Ncpus", 1L),
                      libs_only = FALSE, INSTALL_opts, ...)
     
_A_r_g_u_m_e_n_t_s:

    pkgs: character vector of the names of packages whose current
          versions should be downloaded from the repositories.

          If 'repos = NULL', a character vector of file paths of
          '.tar.gz' files.  These can be source archives or binary
          package archive files (as created by 'R CMD build --binary').
          On a CRAN build of R for Mac OS X these can be '.tgz' files
          containing binary package archives.  Tilde-expansion will be
          done on the file paths.

          If this is missing or a zero-length character vector, a
          listbox of available packages is presented where possible in
          an interactive R session.

     lib: character vector giving the library directories where to
          install the packages.  Recycled as needed.  If missing,
          defaults to the first element of '.libPaths()'.

   repos: character vector, the base URLs of the repositories to use,
          e.g., the URL of a CRAN mirror such as
          '"http://cran.us.r-project.org"'.

          Can be 'NULL' to install from local files (with extension
          '.tar.gz' for source packages).

contriburl: URL(s) of the contrib sections of the repositories.  Use
          this argument only if your repository mirror is incomplete,
          e.g., because you burned only the 'contrib' section on a CD.
          Overrides argument 'repos'.  As with 'repos', can also be
          'NULL' to install from local files.

  method: download method, see 'download.file'.

available: an object as returned by 'available.packages' listing
          packages available at the repositories, or 'NULL' when the
          function makes an internal call to 'available.packages'.

 destdir: directory where downloaded packages are stored.  If it is
          'NULL' (the default) a subdirectory 'downloaded_packages' of
          the session temporary directory will be used (and the files
          will be deleted at the end of the session).

dependencies: logical indicating to also install uninstalled packages
          which these packages depend on/link to/import/suggest (and so
          on recursively).  Not used if 'repos = NULL'.  Can also be a
          character vector, a subset of 'c("Depends", "Imports",
          "LinkingTo", "Suggests", "Enhances")'.

          Only supported if 'lib' is of length one (or missing), so it
          is unambiguous where to install the dependent packages.  If
          this is not the case it is ignored, with a warning.

          The default, 'NA', means 'c("Depends", "Imports",
          "LinkingTo")'.

          'TRUE' means (as from R 2.15.0) to use 'c("Depends",
          "Imports", "LinkingTo", "Suggests")' for 'pkgs' and
          'c("Depends", "Imports", "LinkingTo")' for added
          dependencies: this installs all the packages needed to run
          'pkgs', their examples, tests and vignettes (if the package
          author specified them correctly).

    type: character, indicating the type of package to download and
          install.

          Possible values are '"source"', '"mac.binary.leopard"' and
          '"win.binary"': the binary types can be listed and downloaded
          but not installed on other platforms.

          The default is the appropriate binary type on Windows and on
          the CRAN binary Mac OS X distribution, otherwise '"source"'.
          For the platforms where binary packages are the default, an
          alternative is '"both"' which means 'try binary if available,
          otherwise try source'.  (This will only choose the binary
          package if its version number is no older than the source
          version.)

configure.args: (not used on Windows) a character vector or a named
          list.  If a character vector with no names is supplied, the
          elements are concatenated into a single string (separated by
          a space) and used as the value for the '--configure-args'
          flag in the call to 'R CMD INSTALL'.  If the character vector
          has names these are assumed to identify values for
          '--configure-args' for individual packages.  This allows one
          to specify settings for an entire collection of packages
          which will be used if any of those packages are to be
          installed.  (These settings can therefore be re-used and act
          as default settings.)

          A named list can be used also to the same effect, and that
          allows multi-element character strings for each package which
          are concatenated to a single string to be used as the value
          for '--configure-args'.

configure.vars: (not used on Windows) analogous to 'configure.args' for
          flag '--configure-vars', which is used to set environment
          variables for the 'configure' run.

   clean: a logical value indicating whether to specify to add the
          '--clean' flag to the call to 'R CMD INSTALL'.  This is
          sometimes used to perform additional operations at the end of
          the package installation in addition to removing intermediate
          files.

   Ncpus: The number of parallel processes to use for a parallel
          install of more than one source package.  Values greater than
          one are supported if the 'make' command specified by
          'Sys.getenv("MAKE", "make")' accepts argument '-k -j Ncpus'.

libs_only: a logical value: should the '--libs-only' option be used to
          install only additional sub-architectures?  (See also
          'INSTALL_opts'.)  This can also be used on Windows to install
          just the DLL(s) from a binary package, e.g. to add 64-bit
          DLLs to a 32-bit install.

INSTALL_opts: an optional character vector of additional option(s) to
          be passed to 'R CMD INSTALL' for a source package install.
          E.g.  'c("--html", "--no-multiarch")'.

     ...: Arguments to be passed to 'download.file' (e.g.  'quiet =
          TRUE'), or to the functions for binary installs on Mac OS X
          and Windows (which accept an argument '"lock"': see the
          section on 'Locking').

_D_e_t_a_i_l_s:

     R packages are primarily distributed as _source_ packages, but
     _binary_ packages (a packaging up of the installed package) are
     also supported, and the type most commonly used on Windows and
     from the CRAN distribution for Mac OS X.  This function can
     install either type where supported, either by downloading a file
     from a repository or from a local file.  The default type is given
     by 'getOption("pkgType")': this defaults to '"source"' apart from
     under Windows or a CRAN binary distribution for Mac OS X.

     This is the main function to install packages. It takes a vector
     of names and a destination library, downloads the packages from
     the repositories and installs them.  (If the library is omitted it
     defaults to the first directory in '.libPaths()', with a message
     if there is more than one.)  If 'lib' is omitted or is of length
     one and is not a (group) writable directory, the code offers to
     create a personal library tree (the first element of
     'Sys.getenv("R_LIBS_USER")') and install there.  Detection of a
     writable directory is problematic on Windows: see the 'Note'
     section.

     For source packages from a repository an attempt is made to
     install the packages in an order that respects their dependencies.
     This does assume that all the entries in 'lib' are on the default
     library path for installs (set by 'R_LIBS').

     Using packages with 'type = "source"' always works on Windows
     provided the package contains no C/C++/Fortran code that needs
     compilation.  Otherwise you will need to have installed the Rtools
     collection as described in the 'R for Windows FAQ' _and_ you must
     have the 'PATH' environment variable set up as required by Rtools.

     When installing a binary package, 'install.packages' will abort
     the install if it detects that the package is already installed
     and is currently in use.  In some circumstances (e.g. multiple
     instances of R running at the same time and sharing a library) it
     will not detect a problem, but the installation may fail.

     You are advised to run 'update.packages' before 'install.packages'
     to ensure that any already installed dependencies have their
     latest versions.

     Argument 'libs_only = TRUE' is supported for source installs and
     for Windows binary installs.

_V_a_l_u_e:

     Invisible 'NULL'.

_L_o_c_k_i_n_g:

     There are various options for locking: these differ between source
     and binary installs.

     By default for a source install, the library directory is 'locked'
     by creating a directory '00LOCK' within it.  This has two
     purposes: it prevents any other process installing into that
     library concurrently, and is used to store any previous version of
     the package to restore on error.  A finer-grained locking is
     provided by the option '--pkglock' which creates a separate lock
     for each package: this allows enough freedom for parallel
     installation.  Per-package locking is the default when installing
     a single package, and for multiple packages when 'Ncpus > 1L'.
     Finally locking (and restoration on error) can be suppressed by
     '--no-lock'.

     For a Mac OS X or Windows binary install, no locking is done by
     default.  Setting argument 'lock' to 'TRUE' (it defaults to the
     value of 'getOption("install.lock", FALSE)') will use
     per-directory locking as described for source installs: if the
     value is '"pkglock"' per-package locking will be used.

     If package locking is used on Windows with 'libs_only = TRUE' and
     the installation fails, the package will be restored to its
     previous state.

     Note that it is possible for the package installation to fail so
     badly that the lock directory is not removed: this inhibits any
     further installs to the library directory (or for '--pkglock', of
     the package) until the lock directory is removed manually.

_P_a_r_a_l_l_e_l _i_n_s_t_a_l_l_s:

     Parallel installs are attempted if 'pkgs' has length greater than
     one and 'Ncpus > 1'.  It makes use of a parallel 'make', so the
     'make' specified (default 'make') when R was built must be capable
     of supporting 'make -j n': GNU make and 'dmake' do, but FreeBSD
     and Solaris 'make' do not: if necessary environment variable
     'MAKE' can be set for the current session to select a suitable
     'make'.

     'install.packages' needs to be able to compute all the
     dependencies of 'pkgs' from 'available', including if one element
     of 'pkgs' depends indirectly on another.  This means that if for
     example you are installing CRAN packages which depend on
     Bioconductor packages which in turn depend on CRAN packages,
     'available' needs to cover both CRAN and Bioconductor packages.

_N_o_t_e:

     'install.packages' tries to detect if you have write permission on
     the library directories specified, but Windows reports unreliably.
     If there is only one library directory (the default), R tries to
     find out by creating a test directory, but even this need not be
     the whole story.  Under Windows Vista and later you may have
     permission to write in a library directory but lack permission to
     write binary files (such as '.dll' files) there.  See the 'R for
     Windows FAQ' for workarounds.

_S_e_e _A_l_s_o:

     'update.packages', 'available.packages', 'download.packages',
     'installed.packages', 'contrib.url'.

     See 'download.file' for how to handle proxies and other options to
     monitor file transfers.

     'INSTALL', 'REMOVE', 'remove.packages', 'library', '.packages',
     'read.dcf'

     The 'R Installation and Administration' manual for how to set up a
     repository.

_E_x_a_m_p_l_e_s:

     ## Not run:
     
     install.packages(
         c("XML_0.99-5.tar.gz",
           "../../Interfaces/Perl/RSPerl_0.8-0.tar.gz"),
         repos = NULL,
         configure.args = c(XML = '--with-xml-config=xml-config',
                            RSPerl = "--with-modules='IO Fcntl'"))
     ## End(Not run)
     
> 
> # Or click on the tab "Packages", "Install package(s)", then select a CRAN mirror
> # (e.g. Bristol if you are in the UK) and finally select from the list
> # the package you wish to install.
> 
> # Where are you?
> 
> 	getwd()
[1] "C:/Users/tom.snijders/Documents/RSienaRForge/pkg/RSienaTest.Rcheck/tests"
> 
> # By something like
> 	# setwd('C:/SienaTest')
> # you can set the directory but note the quotes and forward slash.
> # It is also possible to set the directory using the menus if you have them.
> # On a windows machine, you can predetermine the working directory
> # in the <Properties> of the shortcut to R;
> # these are accessible by right-clicking the shortcut.
> 
> # If you want to set the working directory to for example
> 	# "C:\Documents and Settings\johan\My Documents\RSiena_course"
> # simply copy and paste from windows explorer or type
> #     setwd('C:/Documents and Settings/johan/My Documents/RSiena_course')
> # or
> #     setwd('C:\\Documents and Settings\\johan\\My Documents\\RSiena_course')
> #
> # but note that "\" has to be changed; both '/' and '\\' work!!!
> 
> # What is there?
> 
>          list.files()
 [1] "CBE1.DAT"                 "CBE3.DAT"                
 [3] "CBE4.DAT"                 "CBE6.DAT"                
 [5] "EIES1.dat"                "EIES2.dat"               
 [7] "EIESATD.dat"              "EIESATT.dat"             
 [9] "FR0.DAT"                  "FR1.DAT"                 
[11] "FR2.DAT"                  "FR3.DAT"                 
[13] "FR4.DAT"                  "FR5.DAT"                 
[15] "FR6.DAT"                  "HN34_1.DAT"              
[17] "HN34_3.DAT"               "HN34_4.DAT"              
[19] "HN34_6.DAT"               "N34_1.DAT"               
[21] "N34_3.DAT"                "N34_4.DAT"               
[23] "N34_6.DAT"                "VARS.DAT"                
[25] "VRND32T0.DAT"             "VRND32T1.DAT"            
[27] "VRND32T2.DAT"             "VRND32T3.DAT"            
[29] "VRND32T4.DAT"             "VRND32T5.DAT"            
[31] "VRND32T6.DAT"             "arclistdata.dat"         
[33] "cbc1.dat"                 "cbc3.dat"                
[35] "cbc6.dat"                 "klas12b-advice.dat"      
[37] "klas12b-alcohol.dat"      "klas12b-delinquency.dat" 
[39] "klas12b-demographics.dat" "klas12b-net-1.dat"       
[41] "klas12b-net-2.dat"        "klas12b-net-3.dat"       
[43] "klas12b-net-3m.dat"       "klas12b-net-4.dat"       
[45] "klas12b-net-4m.dat"       "klas12b-present.dat"     
[47] "klas12b-primary.dat"      "parallel.R"              
[49] "parallel.Rout"            "parallel.Rout.save"      
[51] "s50-alc2.dat"             "s50-alcohol.dat"         
[53] "s50-dr2.dat"              "s50-network1.dat"        
[55] "s50-network2.dat"         "s50-network3.dat"        
[57] "s50-smoke.dat"            "s50-sp2.dat"             
[59] "s50-sport.dat"            "s50.csv"                 
[61] "s50.out"                  "s50_d1.net"              
[63] "s50_d2.net"               "s50_d3.net"              
[65] "s50e.csv"                 "s50e.dat"                
[67] "s50e.out"                 "s50paj.csv"              
[69] "s50paj.out"               "scriptfile.R"            
[71] "scriptfile.Rout"          "scriptfile.Rout.save"    
[73] "scriptfile.Rout.win"      "scripts.R"               
[75] "scripts.Rout"             "scripts.Rout.save"       
[77] "startup.Rs"               "test10.out"              
[79] "test12.out"               "test3.out"               
[81] "test4.out"                "test7.out"               
[83] "test8.out"                "tmp3a.dat"               
[85] "tmp4a.dat"                "vtextexoreal.dat"        
> 
> # What is available in RSiena?
> 
>          ?RSiena
RSiena-package             package:RSiena              R Documentation

_S_i_m_u_l_a_t_i_o_n _I_n_v_e_s_t_i_g_a_t_i_o_n _f_o_r _E_m_p_i_r_i_c_a_l _N_e_t_w_o_r_k _A_n_a_l_y_s_i_s

_D_e_s_c_r_i_p_t_i_o_n:

     Fits models to longitudinal sets of networks.

_D_e_t_a_i_l_s:

     Use 'siena07' to fit a model.

     Data objects can be created via the Gui displayed by 'siena01Gui',
     via
     'sienaDataCreateFromSession' or directly from matrices and vectors
     using 'sienaDependent', 'coCovar' etc.\ and finally 'sienaDataCreate'.

     Effects are selected using an _effects_ object, which can be
     created using 'getEffects'.

     Control of the fitting requires a _model_ object, which can be
     created by 'sienaModelCreate'.

     More detailed help is available in the manual which you can
     display using
     'RShowDoc("RSiena_Manual", package="RSiena")'

       Package:   RSiena     
       Type:      Package    
       Version:   1.1-223    
       Date:      2013-01-01 
       License:   GPL-2      
       LazyLoad:  yes        
      
_A_u_t_h_o_r(_s):

     Ruth Ripley, Krists Boitmanis, Tom Snijders.

     Maintainer: RSiena developers <rsiena@stats.ox.ac.uk>

_R_e_f_e_r_e_n_c_e_s:

     See <URL: http://www.stats.ox.ac.uk/~snijders/siena/>

_S_e_e _A_l_s_o:

     'siena07'

_E_x_a_m_p_l_e_s:

     mynet1 <- sienaDependent(array(c(tmp3, tmp4), dim=c(32, 32, 2)))
     mydata <- sienaDataCreate(mynet1)
     myeff <- getEffects(mydata)
     mymodel <- sienaModelCreate(findiff=FALSE, fn=simstats0c, nsub=2, n3=100)
     ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE)
     
> 
> # (these are .htlm HELP PAGES)
> 
> # At the bottom of this page, when you click on "Index",
> # a list of all the available functions is shouwn in your browser.
> # The same list is shown in the gui ('graphical user interface') by requesting
> 
>          library(help=RSiena)

		Information on package 'RSiena'

Description:

Package:                            RSiena
Type:                               Package
Title:                              Siena - Simulation Investigation
                                    for Empirical Network Analysis
Version:                            1.1-223
Date:                               2013-01-01
Author:                             Various
Depends:                            R (>= 2.10.0)
Imports:                            Matrix
Suggests:                           tcltk, snow, rlecuyer, network,
                                    codetools, lattice, MASS, parallel,
                                    xtable, tools
SystemRequirements:                 GNU make, tcl/tk 8.5, Tktable
Maintainer:                         RSiena developers
                                    <rsiena@stats.ox.ac.uk>
Description:                        Fits models to longitudinal
                                    networks
License:                            GPL (>=2)
LazyLoad:                           yes
LazyData:                           yes
BuildResaveData:                    no
URL:                                http://www.stats.ox.ac.uk/~snijders/siena
Repository:                         R-Forge
Repository/R-Forge/Project:         rsiena
Repository/R-Forge/Revision:        224
Repository/R-Forge/DateTimeStamp:   2013-02-14 07:24:12
Date/Publication:                   2013-02-14 07:24:12
Packaged:                           2013-02-14 11:17:08 UTC; rforge
Built:                              R 2.15.2; x86_64-w64-mingw32;
                                    2013-02-14 11:46:20 UTC; windows

Index:

HN3401                  Network data: excerpt from 'Dutch Social
                        Behavior Data Set' of Chris Baerveldt.
N3401                   Network data: excerpt from 'Dutch Social
                        Behavior Data Set' of Chris Baerveldt.
RSiena-package          Simulation Investigation for Empirical Network
                        Analysis
allEffects              Internal data frame used to construct effect
                        objects.
bayes                   A function for fitting Bayesian models
coCovar                 Function to create a constant covariate object
coDyadCovar             Function to create a constant dyadic covariate
                        object.
edit.sienaEffects       Allow editing of a sienaEffects object if a gui
                        is available.
effectsDocumentation    Function to create a table of documentation of
                        effect names, short names etc.
getEffects              Function to create a Siena effects object
includeEffects          Function to include effects in a Siena model
includeInteraction      Function to create user-specified interactions
                        for a Siena model.
includeTimeDummy        Functions to include time dummy effects in a
                        Siena model
installGui              Obsolete function to start up the installer for
                        the standalone Gui.
iwlsm                   Function to fit an iterated weighted least
                        squares model.
maxlikefn               A ML version of FRAN
plot.sienaTimeTest      Functions to plot assessment of time
                        heterogeneity of parameters
print.sienaEffects      Print methods for Siena effects objects
print.sienaMeta         Methods for processing sienaMeta objects
print01Report           Function to produce the Siena01 report from R
                        objects
s50                     Network data: excerpt from 'Teenage Friends and
                        Lifestyle Study' data.
s501                    Network 1 data: excerpt from 'Teenage Friends
                        and Lifestyle Study' data.
s502                    Network 2 data: excerpt from 'Teenage Friends
                        and Lifestyle Study' data.
s503                    Network 3 data: excerpt from 'Teenage Friends
                        and Lifestyle Study' data.
s50a                    Alcohol use data: excerpt from 'Teenage Friends
                        and Lifestyle Study' data
setEffect               Function to set various columns in an effects
                        object in a Siena model
siena01Gui              User interface
siena07                 Function to estimate parameters in a Siena
                        model
siena08                 Function to perform a meta analysis of a
                        collection of Siena fits.
sienaCompositionChange
                        Functions to create a Siena composition change
                        object
sienaDataConstraint     Function to change the values of the
                        constraints between networks.
sienaDataCreate         Function to create a Siena data object
sienaDataCreateFromSession
                        Creates a Siena data object from a Siena
                        session file
sienaFit.methods        Methods for processing sienaFit objects
sienaGroupCreate        Function to group together several Siena data
                        objects
sienaModelCreate        Function to create an object containing the
                        algorithm specifications for parameter
                        estimation in RSiena
sienaModelOptions       Function to allow entry of model options
sienaDependent                Function to create a Siena network object
sienaNodeSet            Function to create a node set
sienaTimeTest           Functions to assess and account for time
                        heterogeneity of parameters
simstats0c              Versions of FRAN
summary.iwlsm           Summary method for Iterative Weighted Least
                        Squares Models
tmp3                    van de Bunt's Freshman dataset, time point 3
tmp4                    van de Bunt's Freshman dataset, time point 4
updateTheta             Function to update the initial values of theta.
varCovar                Function to create a changing covariate object.
varDyadCovar            Function to create a changing dyadic covariate
                        object.
xtable                  Access xtable in package xtable
> 
> # Where is the manual?
> 
>          RShowDoc("RSiena_Manual", package="RSiena")
> 
> # (Note, however, that it is possible that the Siena website
> # at http://www.stats.ox.ac.uk/~snijders/siena/ contains a more recent version.)
> 
> # Each data is named (for example below we name it friend.data.w1)
> # so that we can call it as an object within R.
> # If you read an object straight into R, it will treat it as a
> # dataset, or in R terminology a "data frame".
> # Here this is not what we want, therefore on reading
> # we will immediately convert it to a matrix.
> # R will read in many data formats, the command to read them is read.table.
>        ?read.table
read.table                package:utils                R Documentation

_D_a_t_a _I_n_p_u_t

_D_e_s_c_r_i_p_t_i_o_n:

     Reads a file in table format and creates a data frame from it,
     with cases corresponding to lines and variables to fields in the
     file.

_U_s_a_g_e:

     read.table(file, header = FALSE, sep = "", quote = "\"'",
                dec = ".", row.names, col.names,
                as.is = !stringsAsFactors,
                na.strings = "NA", colClasses = NA, nrows = -1,
                skip = 0, check.names = TRUE, fill = !blank.lines.skip,
                strip.white = FALSE, blank.lines.skip = TRUE,
                comment.char = "#",
                allowEscapes = FALSE, flush = FALSE,
                stringsAsFactors = default.stringsAsFactors(),
                fileEncoding = "", encoding = "unknown", text)
     
     read.csv(file, header = TRUE, sep = ",", quote="\"", dec=".",
              fill = TRUE, comment.char="", ...)
     
     read.csv2(file, header = TRUE, sep = ";", quote="\"", dec=",",
               fill = TRUE, comment.char="", ...)
     
     read.delim(file, header = TRUE, sep = "\t", quote="\"", dec=".",
                fill = TRUE, comment.char="", ...)
     
     read.delim2(file, header = TRUE, sep = "\t", quote="\"", dec=",",
                 fill = TRUE, comment.char="", ...)
     
_A_r_g_u_m_e_n_t_s:

    file: the name of the file which the data are to be read from.
          Each row of the table appears as one line of the file.  If it
          does not contain an _absolute_ path, the file name is
          _relative_ to the current working directory, 'getwd()'.
          Tilde-expansion is performed where supported.  As from R
          2.10.0 this can be a compressed file (see 'file').

          Alternatively, 'file' can be a readable text-mode connection
          (which will be opened for reading if necessary, and if so
          'close'd (and hence destroyed) at the end of the function
          call).  (If 'stdin()' is used, the prompts for lines may be
          somewhat confusing.  Terminate input with a blank line or an
          EOF signal, 'Ctrl-D' on Unix and 'Ctrl-Z' on Windows.  Any
          pushback on 'stdin()' will be cleared before return.)

          'file' can also be a complete URL.  (For the supported URL
          schemes, see the 'URLs' section of the help for 'url'.)

  header: a logical value indicating whether the file contains the
          names of the variables as its first line.  If missing, the
          value is determined from the file format: 'header' is set to
          'TRUE' if and only if the first row contains one fewer field
          than the number of columns.

     sep: the field separator character.  Values on each line of the
          file are separated by this character.  If 'sep = ""' (the
          default for 'read.table') the separator is 'white space',
          that is one or more spaces, tabs, newlines or carriage
          returns.

   quote: the set of quoting characters. To disable quoting altogether,
          use 'quote = ""'.  See 'scan' for the behaviour on quotes
          embedded in quotes.  Quoting is only considered for columns
          read as character, which is all of them unless 'colClasses'
          is specified.

     dec: the character used in the file for decimal points.

row.names: a vector of row names.  This can be a vector giving the
          actual row names, or a single number giving the column of the
          table which contains the row names, or character string
          giving the name of the table column containing the row names.

          If there is a header and the first row contains one fewer
          field than the number of columns, the first column in the
          input is used for the row names.  Otherwise if 'row.names' is
          missing, the rows are numbered.

          Using 'row.names = NULL' forces row numbering. Missing or
          'NULL' 'row.names' generate row names that are considered to
          be 'automatic' (and not preserved by 'as.matrix').

col.names: a vector of optional names for the variables.  The default
          is to use '"V"' followed by the column number.

   as.is: the default behavior of 'read.table' is to convert character
          variables (which are not converted to logical, numeric or
          complex) to factors.  The variable 'as.is' controls the
          conversion of columns not otherwise specified by
          'colClasses'.  Its value is either a vector of logicals
          (values are recycled if necessary), or a vector of numeric or
          character indices which specify which columns should not be
          converted to factors.

          Note: to suppress all conversions including those of numeric
          columns, set 'colClasses = "character"'.

          Note that 'as.is' is specified per column (not per variable)
          and so includes the column of row names (if any) and any
          columns to be skipped.

na.strings: a character vector of strings which are to be interpreted
          as 'NA' values.  Blank fields are also considered to be
          missing values in logical, integer, numeric and complex
          fields.

colClasses: character.  A vector of classes to be assumed for the
          columns.  Recycled as necessary, or if the character vector
          is named, unspecified values are taken to be 'NA'.

          Possible values are 'NA' (the default, when 'type.convert' is
          used), '"NULL"' (when the column is skipped), one of the
          atomic vector classes (logical, integer, numeric, complex,
          character, raw), or '"factor"', '"Date"' or '"POSIXct"'.
          Otherwise there needs to be an 'as' method (from package
          'methods') for conversion from '"character"' to the specified
          formal class.

          Note that 'colClasses' is specified per column (not per
          variable) and so includes the column of row names (if any).

   nrows: integer: the maximum number of rows to read in.  Negative and
          other invalid values are ignored.

    skip: integer: the number of lines of the data file to skip before
          beginning to read data.

check.names: logical.  If 'TRUE' then the names of the variables in the
          data frame are checked to ensure that they are syntactically
          valid variable names.  If necessary they are adjusted (by
          'make.names') so that they are, and also to ensure that there
          are no duplicates.

    fill: logical. If 'TRUE' then in case the rows have unequal length,
          blank fields are implicitly added.  See 'Details'.

strip.white: logical. Used only when 'sep' has been specified, and
          allows the stripping of leading and trailing white space from
          unquoted 'character' fields ('numeric' fields are always
          stripped).  See 'scan' for further details (including the
          exact meaning of 'white space'), remembering that the columns
          may include the row names.

blank.lines.skip: logical: if 'TRUE' blank lines in the input are
          ignored.

comment.char: character: a character vector of length one containing a
          single character or an empty string.  Use '""' to turn off
          the interpretation of comments altogether.

allowEscapes: logical.  Should C-style escapes such as '\n' be
          processed or read verbatim (the default)?  Note that if not
          within quotes these could be interpreted as a delimiter (but
          not as a comment character).  For more details see 'scan'.

   flush: logical: if 'TRUE', 'scan' will flush to the end of the line
          after reading the last of the fields requested.  This allows
          putting comments after the last field.

stringsAsFactors: logical: should character vectors be converted to
          factors?  Note that this is overridden by 'as.is' and
          'colClasses', both of which allow finer control.

fileEncoding: character string: if non-empty declares the encoding used
          on a file (not a connection) so the character data can be
          re-encoded.  See the 'Encoding' section of the help for
          'file', the 'R Data Import/Export Manual' and 'Note'.

encoding: encoding to be assumed for input strings.  It is used to mark
          character strings as known to be in Latin-1 or UTF-8 (see
          'Encoding'): it is not used to re-encode the input, but
          allows R to handle encoded strings in their native encoding
          (if one of those two).  See 'Value'.

    text: character string: if 'file' is not supplied and this is, then
          data are read from the value of 'text' via a text connection.
          Notice that a literal string can be used to include (small)
          data sets within R code.

     ...: Further arguments to be passed to 'read.table'.

_D_e_t_a_i_l_s:

     This function is the principal means of reading tabular data into
     R.

     Unless 'colClasses' is specified, all columns are read as
     character columns and then converted using 'type.convert' to
     logical, integer, numeric, complex or (depending on 'as.is')
     factor as appropriate.  Quotes are (by default) interpreted in all
     fields, so a column of values like '"42"' will result in an
     integer column.

     A field or line is 'blank' if it contains nothing (except
     whitespace if no separator is specified) before a comment
     character or the end of the field or line.

     If 'row.names' is not specified and the header line has one less
     entry than the number of columns, the first column is taken to be
     the row names.  This allows data frames to be read in from the
     format in which they are printed.  If 'row.names' is specified and
     does not refer to the first column, that column is discarded from
     such files.

     The number of data columns is determined by looking at the first
     five lines of input (or the whole file if it has less than five
     lines), or from the length of 'col.names' if it is specified and
     is longer.  This could conceivably be wrong if 'fill' or
     'blank.lines.skip' are true, so specify 'col.names' if necessary
     (as in the 'Examples').

     'read.csv' and 'read.csv2' are identical to 'read.table' except
     for the defaults.  They are intended for reading 'comma separated
     value' files ('.csv') or ('read.csv2') the variant used in
     countries that use a comma as decimal point and a semicolon as
     field separator.  Similarly, 'read.delim' and 'read.delim2' are
     for reading delimited files, defaulting to the TAB character for
     the delimiter.  Notice that 'header = TRUE' and 'fill = TRUE' in
     these variants, and that the comment character is disabled.

     The rest of the line after a comment character is skipped; quotes
     are not processed in comments.  Complete comment lines are allowed
     provided 'blank.lines.skip = TRUE'; however, comment lines prior
     to the header must have the comment character in the first
     non-blank column.

     Quoted fields with embedded newlines are supported except after a
     comment character.

_V_a_l_u_e:

     A data frame ('data.frame') containing a representation of the
     data in the file.

     Empty input is an error unless 'col.names' is specified, when a
     0-row data frame is returned: similarly giving just a header line
     if 'header = TRUE' results in a 0-row data frame.  Note that in
     either case the columns will be logical unless 'colClasses' was
     supplied.

     Character strings in the result (including factor levels) will
     have a declared encoding if 'encoding' is '"latin1"' or '"UTF-8"'.

_M_e_m_o_r_y _u_s_a_g_e:

     These functions can use a surprising amount of memory when reading
     large files.  There is extensive discussion in the 'R Data
     Import/Export' manual, supplementing the notes here.

     Less memory will be used if 'colClasses' is specified as one of
     the six atomic vector classes.  This can be particularly so when
     reading a column that takes many distinct numeric values, as
     storing each distinct value as a character string can take up to
     14 times as much memory as storing it as an integer.

     Using 'nrows', even as a mild over-estimate, will help memory
     usage.

     Using 'comment.char = ""' will be appreciably faster than the
     'read.table' default.

     'read.table' is not the right tool for reading large matrices,
     especially those with many columns: it is designed to read _data
     frames_ which may have columns of very different classes.  Use
     'scan' instead for matrices.

_N_o_t_e:

     The columns referred to in 'as.is' and 'colClasses' include the
     column of row names (if any).

     Because this function uses 'pushBack' it can only handle character
     strings which can be represented in the current locale.  So
     although 'fileEncoding' can be used to specify the encoding of the
     input file (or a connection can be specified which re-encodes),
     the implied re-encoding must be possible.  This is not a problem
     in UTF-8 locales, but it can be on Windows - 'readLines' or 'scan'
     can be used to avoid this limitation since they have special
     provisions to convert input to UTF-8.

_R_e_f_e_r_e_n_c_e_s:

     Chambers, J. M. (1992) _Data for models._ Chapter 3 of
     _Statistical Models in S_ eds J. M. Chambers and T. J. Hastie,
     Wadsworth & Brooks/Cole.

_S_e_e _A_l_s_o:

     The 'R Data Import/Export' manual.

     'scan', 'type.convert', 'read.fwf' for reading _f_ixed _w_idth
     _f_ormatted input; 'write.table'; 'data.frame'.

     'count.fields' can be useful to determine problems with reading
     files which result in reports of incorrect record lengths (see the
     'Examples' below).

     <URL: http://tools.ietf.org/html/rfc4180> for the IANA definition
     of CSV files (which requires comma as separator and CRLF line
     endings).

_E_x_a_m_p_l_e_s:

     ## using count.fields to handle unknown maximum number of fields
     ## when fill=TRUE
     test1 <- c(1:5, "6,7", "8,9,10")
     tf <- tempfile()
     writeLines(test1, tf)
     
     read.csv(tf, fill = TRUE) # 1 column
     ncol <- max(count.fields(tf, sep = ","))
     read.csv(tf, fill = TRUE, header = FALSE,
              col.names = paste("V", seq_len(ncol), sep = ""))
     unlink(tf)
     
     ## "Inline" data set, using text=
     ## Notice that leading and trailing empty lines are auto-trimmed
     
     read.table(header=TRUE, text="
     a b
     1 2
     3 4
     ")
     
> # In the help file for read.table, look at the section "Value",
> # which is there in every help page:
> # it indicates the class of the object that is produced by the function.
> # For read.table, the value is a data frame; below we see what this is.
> #
> # If we wished to read a .csv file we would have
> # used the read.csv command.
> # The pathnames must have forward slashes, or double backslashes.
> # If single backslashes are used, one of the error messages will be:
> #   1: '\R' is an unrecognized escape in a character string
> 
> #-----------------------------------------------------------------------------
> 
> # Quick start(Data assignment).
> # Please make sure the s50 data set is in your working directory.
> # The data set is on the Siena website ("Data sets" tab) and must be
> # unzipped in your working directory.
> 
>         friend.data.w1 <- as.matrix(read.table("s50-network1.dat"))
>         friend.data.w2 <- as.matrix(read.table("s50-network2.dat"))
>         friend.data.w3 <- as.matrix(read.table("s50-network3.dat"))
>         drink <- as.matrix(read.table("s50-alcohol.dat"))
>         smoke <- as.matrix(read.table("s50-smoke.dat"))
> 
> # Explanation of data structures and formats below
> 
> ################# - DIFFERENT DATA FORMATS - #######################################
> ###
> ### The assignments here involve reading in data to a "data frame"
> ### 		data <- read.table("data.dat")
> ### reads your text file into a "data frame"; check the class of the object "data"
> ###        >  class(data)
> ###        [1] "data.frame"
> ### If your data is not a ".dat" file, alternative import methods are
> ### ----- ".csv" ------------------------------------------------------------------
> ###        data <- read.table("c:/data.csv", header=TRUE,
> ###                                   sep=",", row.names="iden")
> ### ---- ".csv" -------------------------------------------------------------------
> ###        data <- read.csv("data.csv",header=T)
> ### ---- ".spss" ------------------------------------------------------------------
> ###        library(foreign)
> ###        data <- read.spss("c:/data.spss")
> ### ---- ".dta" -------------------------------------------------------------------
> ###        library(foreign)
> ###        data <- read.dta("c:/data.dta")
> ###
> ####################################################################################
> 
> ################# - FROM DATA FRAME TO MATRIX - ####################################
> ###
> ### ---- Data frame ----------------------------------------------------------------
> ### The data frame is like a spreadsheet of cases by variables,
> ### where the variables are the columns, and these have the names
> ###        names( data )
> ### a spreadsheet view of a data frame is given by the fix() command
> ###        fix( data )
> ###
> ### All changes you make in this spreadsheet will be saved automatically,
> ### so beware.
> ###
> ### As an example create two vectors:
> 	      height <- c( 120, 150, 180, 200, 190, 177, 170, 125, 141, 157 )
>       	weight <- c( 11, 14, 17, 18, 17, 18, 11, 12, 10, 15 )
> ### The function c() combines its argument into a vector
> ### (or into a list, but we are not concerned with that possibility now.).
> ### These two vectors can be collected as variables in a data frame
> 	      data <- data.frame( height, weight )
> ### and look at the results
> 		    data
   height weight
1     120     11
2     150     14
3     180     17
4     200     18
5     190     17
6     177     18
7     170     11
8     125     12
9     141     10
10    157     15
> ### The columns of a data frame may be extracted using a "$" sign and their names.
> ### For example:
> 		names( data )
[1] "height" "weight"
> 		data$height
 [1] 120 150 180 200 190 177 170 125 141 157
> ### Or by "[]" and column number, e.g.
> 		data[1]
   height
1     120
2     150
3     180
4     200
5     190
6     177
7     170
8     125
9     141
10    157
>   	data[  , 1]
 [1] 120 150 180 200 190 177 170 125 141 157
>   	data[ 1,  ]
  height weight
1    120     11
> ### If you wish to see the structure of an object, such as data, then request
>       str(data)
'data.frame':	10 obs. of  2 variables:
 $ height: num  120 150 180 200 190 177 170 125 141 157
 $ weight: num  11 14 17 18 17 18 11 12 10 15
> ### Objects often have attributes:
>       attributes(data)
$names
[1] "height" "weight"

$row.names
 [1]  1  2  3  4  5  6  7  8  9 10

$class
[1] "data.frame"

> 
> ### ---- Matrix -------------------------------------------------------------------
> ### A "matrix" is a numeric object ordered like a matrix with dimensions
> ### ( dim() ) given by the number of rows and columns, e.g.
> 		dim( friend.data.w1 )
[1] 50 50
> 
> ### If you wish to play around with a copy of the matrix, e.g. having the name "data",
> ### you can make the copy by the command
> 		data <- friend.data.w1
> ### The earlier object that we created with the name "data" now has been lost.
> ### Elements if matrices can be accessed by using square brackets.
> ### For example, the element of "data" in row 2 and column 3 is given by
> 		data[ 2, 3 ]
V3 
 0 
> ### the first three rows of a matrix called data are given by
> 		data[ 1:3, ]
     V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12 V13 V14 V15 V16 V17 V18 V19 V20 V21
[1,]  0  0  0  0  0  0  0  0  0   0   1   0   0   1   0   0   0   0   0   0   0
[2,]  0  0  0  0  0  0  1  0  0   0   1   0   0   0   0   0   0   0   0   0   0
[3,]  0  0  0  1  0  0  0  0  1   0   0   0   0   0   0   0   0   0   0   0   0
     V22 V23 V24 V25 V26 V27 V28 V29 V30 V31 V32 V33 V34 V35 V36 V37 V38 V39
[1,]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
[2,]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
[3,]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
     V40 V41 V42 V43 V44 V45 V46 V47 V48 V49 V50
[1,]   0   0   0   0   0   0   0   0   0   0   0
[2,]   0   0   0   0   0   0   0   0   0   0   0
[3,]   0   0   0   0   0   0   0   0   0   0   0
> ### columns 2, 5, and 6 are given by
> 		data[ , c( 2, 5, 6) ]
      V2 V5 V6
 [1,]  0  0  0
 [2,]  0  0  0
 [3,]  0  0  0
 [4,]  0  0  0
 [5,]  0  0  0
 [6,]  0  0  0
 [7,]  1  0  0
 [8,]  0  0  1
 [9,]  0  0  0
[10,]  0  0  0
[11,]  1  0  0
[12,]  0  0  0
[13,]  0  0  0
[14,]  0  0  0
[15,]  0  0  0
[16,]  0  0  0
[17,]  0  0  0
[18,]  0  0  0
[19,]  0  0  0
[20,]  0  0  0
[21,]  0  0  0
[22,]  0  0  0
[23,]  0  0  0
[24,]  0  0  0
[25,]  0  0  0
[26,]  0  0  0
[27,]  0  0  0
[28,]  0  0  0
[29,]  0  0  0
[30,]  0  0  0
[31,]  0  0  0
[32,]  0  1  0
[33,]  0  0  0
[34,]  0  0  0
[35,]  0  0  0
[36,]  0  0  0
[37,]  0  0  0
[38,]  0  0  0
[39,]  0  0  0
[40,]  0  0  0
[41,]  0  0  0
[42,]  0  0  0
[43,]  0  0  0
[44,]  0  0  0
[45,]  0  0  0
[46,]  0  0  0
[47,]  0  0  0
[48,]  0  0  0
[49,]  0  0  0
[50,]  0  0  0
> 
> ### ---- Converting data frame to matrix -------------------------------------------
> ###
> ### Most classes can be converted to other classes through "as.typeofclass ()", e.g.
> ### if "data" would be an object with a matrix-like structure,
> ### then it could be converted to the class "matrix" by the command
> 	      data <- as.matrix( data )
> 
> ####################################################################################
> 
> 
> ################## - EXAMPLE FOR ARC LIST - ########################################
> ###
> ### From the Siena website you can download the data set arclistdata.dat:
> ###   http://www.stats.ox.ac.uk/~snijders/siena/arclistdata.dat
> ### Download this file and save it in your current directory.
> 		ArcList <- read.table( "arclistdata.dat", header=FALSE ) # creates data frame
> ### Note the capitalization.
> ### Now ArcList is a data.frame
> ### (we saw this above in the help file for read.table).
> ### What are its dimensions?
>             dim(ArcList)
[1] 351   4
> ### You can get an impression of it by looking at the start of the object:
>             head(ArcList)
  V1 V2 V3 V4
1 14  1  1  1
2  7  2  1  1
3 11  2  1  1
4  4  3  1  1
5  9  3  1  1
6  3  4  1  1
> ### This is a data file in arclist format, with columns:
> ### sender id, receiver id, value of tie, wave.
> ### Add names to the columns:
> 		names(ArcList) <- c( "sid", "recid", "bff", "wid" )
> ### The bff ("best friend") variable does not have much variability:
>             table(ArcList$bff)

  1 
351 
> ### It may be nice to order the rows by sender, then by receiver, then by wave.
> ### The tedious way to do this is
>             ArcList <- ArcList[ order( ArcList$sid, ArcList$recid, ArcList$wid), ]
> ### To understand this, you may look at the help page for function order()
> ### The rows of Arclist are ordered first by ArcList$sid, then by ArcList$recid,
> ### and then by ArcList$wid;
> ### these reordered rows then are put into the object ArcList,
> ### this overwriting the earlier contents of this object.
> ### This way is tedious because it is repeated all the time that the names
> ### sid, recid, wid refer to the ArcList object.
> ### The less tedious way uses the function "with".
> ### The with(a, b) function tells R that b must be calculated,
> ### while the otherwise unknown names refer to data set a:
> 		ArcList <- with( ArcList, ArcList[ order( sid, recid, wid), ] )
> ### Now suppose we want to create a separate set of records for each wave.
> ### Select by wave:
> 
> 		SAff.1 <- with(ArcList, ArcList[ wid == 1, ] ) #extracts edges in wave 1
> 		SAff.2 <- with(ArcList, ArcList[ wid == 2, ] ) #extracts edges in wave 2
> 		SAff.3 <- with(ArcList, ArcList[ wid == 3, ] ) #extracts edges in wave 3
> 		n <- 50 # this is the number of nodes which is not provided by the arclist
> 
> ### and has to be repeated separately for each of the waves
> ### (you may loop over the waves if you like),
> 
> ### For transforming a matrix into an adjacency list
> 
> ## create indicator matrix of non-zero entries of a
>         ones <- !friend.data.w1 %in% 0
> ## create empty edge list of desired length
>         edges <- matrix(0, sum(ones), 3)
> # fill the columns of the edge list
>         edges[, 1] <- row(friend.data.w1)[ones]
>         edges[, 2] <- col(friend.data.w1)[ones]
>         edges[, 3] <- friend.data.w1[ones]
> # if desired, order edge list by senders and then receivers
>         edges <- edges[order(edges[, 1], edges[, 2]), ]
> 
> ### For transforming an arclist into a matrix
> 	## First remove the fourth coulmn indicating the wave, so that we are left
> 	## with sender, receiver and value of the tie, and make it into matrix format
> 		SAff.1.copy <- SAff.1[, 1:3]
> 		SAff.1.copy <- as.matrix(SAff.1.copy)
> # create empty adjacency matrix
>         adj <- matrix(0, 50, 50)
> # put edge values in desired places
>         adj[edges[, 1:2]] <- edges[, 3]
> ### Also see Section 4.1.1 of the Siena manual.
> 
> 
> ###################################################################################
> ################ - READING IN PAJEK DATA - ########################################
> ###
> ### If you have data in Pajek format you can use the package "network" in order
> ### to convert it to a network object. This example is from ?read.paj
> ###   require( network )
> ###
> ###   par( mfrow = c( 2, 2 ) )
> ###
> ###test.net.1 <- read.paj("http://vlado.fmf.uni-lj.si/pub/networks/data/GD/gd98/A98.net" )
> ###   plot( test.net.1,main = test.net.1$gal$title )
> ###   test.net.2 <- read.paj("http://vlado.fmf.uni-lj.si/pub/networks/data/mix/USAir97.net" )
> ###   plot( test.net.2,main = test.net.2$gal$title )
> ###
> ###################################################################################
> 
> # Before we work with the data, we want to be sure it is correct. A simple way
> # to check that our data is a matrix is the command class()
> 
>         class( friend.data.w1 )
[1] "matrix"
> 
> # to list the properties of an object attributes( friend.data.w1 )
> # (different classes have different attributes)
> 
> # To check that all the data has been read in, we can use the dim() command.
> # The adjacency matrix should have the same dimensions as the original data
> # (here, 50 by 50).
> 
>         dim(friend.data.w1)
[1] 50 50
>         dim(drink)
[1] 50  3
> 
> # To check the values are correct, including missing values, we can use
> # the following commands to tabulate the variables.
> 
>         table( friend.data.w1, useNA = 'always' )
friend.data.w1
   0    1 <NA> 
2387  113    0 
>         table( friend.data.w2, useNA = 'always' )
friend.data.w2
   0    1 <NA> 
2384  116    0 
>         table( friend.data.w3, useNA = 'always' )
friend.data.w3
   0    1 <NA> 
2378  122    0 
>         table( drink, useNA = 'always' )
drink
   1    2    3    4    5 <NA> 
   9   41   41   42   17    0 
>         table( smoke, useNA = 'always' )
smoke
   1    2    3 <NA> 
 102   15   33    0 
> 
> # NA is the R code for missing data (Not Available).
> # This data set happens to have no missings
> # (see the data description on the Siena website).
> # If there are any missings, it is necessary to tell R about the missing data codes.
> # Let us do as if the missing codes for the friendship network were 6 and 9.
> # This leads to the following commands.
> # (For new R users: the c() function used here as "c(6,9)" constructs
> #  a vector [c for column] consisting of the numbers 6 and 9.
> #  This function is used a lot in basic R.)
> 
>         friend.data.w1[ friend.data.w1 %in% c(6,9) ] <- NA
>         friend.data.w2[ friend.data.w2 %in% c(6,9) ] <- NA
>         friend.data.w3[ friend.data.w3 %in% c(6,9) ] <- NA
> 
> # Commands for descriptive analysis are in the script: RscriptSNADescriptives.R
> 
> ############## - SELECTING SUBSETS OF DATA - ###################################
> 
> # To select a subset of the data based on an actor variable, say,
> # those who have the value 2 or 3 on drinking at time 1
> # (the possibilities are endless, but hopefully this will serve as a pattern)
> 
>       use <- drink[, 1] %in% c(2, 3)
> 
> # This creates a logical vector which is TRUE for the cases where the condition
> # is satisfied. To view or check, display the vectors:
> 
>      	drink[ , 1 ]
 [1] 3 2 2 2 3 4 4 4 2 4 5 5 3 3 4 4 2 4 3 2 1 3 4 3 3 4 2 2 3 1 4 4 3 2 3 4 2 3
[39] 2 1 4 4 2 5 2 2 2 2 1 1
>      	use
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
[13]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE
[25]  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE
[37]  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
[49] FALSE FALSE
> 
> # and the number of selected cases is displayed by
> 
>       sum( use )
[1] 28
> 
> # or
> 
> 	table( use )
use
FALSE  TRUE 
   22    28 
> 
> # To have this arrayed more neatly side by side, you can create and display
> # a matrix with the desired information,
> 
>         aa <- matrix(nrow=50, ncol=2)
>         aa[,1] <- drink[,1]
>         aa[,2] <- use
>         aa
      [,1] [,2]
 [1,]    3    1
 [2,]    2    1
 [3,]    2    1
 [4,]    2    1
 [5,]    3    1
 [6,]    4    0
 [7,]    4    0
 [8,]    4    0
 [9,]    2    1
[10,]    4    0
[11,]    5    0
[12,]    5    0
[13,]    3    1
[14,]    3    1
[15,]    4    0
[16,]    4    0
[17,]    2    1
[18,]    4    0
[19,]    3    1
[20,]    2    1
[21,]    1    0
[22,]    3    1
[23,]    4    0
[24,]    3    1
[25,]    3    1
[26,]    4    0
[27,]    2    1
[28,]    2    1
[29,]    3    1
[30,]    1    0
[31,]    4    0
[32,]    4    0
[33,]    3    1
[34,]    2    1
[35,]    3    1
[36,]    4    0
[37,]    2    1
[38,]    3    1
[39,]    2    1
[40,]    1    0
[41,]    4    0
[42,]    4    0
[43,]    2    1
[44,]    5    0
[45,]    2    1
[46,]    2    1
[47,]    2    1
[48,]    2    1
[49,]    1    0
[50,]    1    0
> 	#the first column contains the drink level and the second whether this
> 	#level is 2 or 3 (1) or not (0)
> 
> # or as a shorter alternative
> 
> 	aa <- cbind(drink[ , 1 ],use)
> 	aa
        use
 [1,] 3   1
 [2,] 2   1
 [3,] 2   1
 [4,] 2   1
 [5,] 3   1
 [6,] 4   0
 [7,] 4   0
 [8,] 4   0
 [9,] 2   1
[10,] 4   0
[11,] 5   0
[12,] 5   0
[13,] 3   1
[14,] 3   1
[15,] 4   0
[16,] 4   0
[17,] 2   1
[18,] 4   0
[19,] 3   1
[20,] 2   1
[21,] 1   0
[22,] 3   1
[23,] 4   0
[24,] 3   1
[25,] 3   1
[26,] 4   0
[27,] 2   1
[28,] 2   1
[29,] 3   1
[30,] 1   0
[31,] 4   0
[32,] 4   0
[33,] 3   1
[34,] 2   1
[35,] 3   1
[36,] 4   0
[37,] 2   1
[38,] 3   1
[39,] 2   1
[40,] 1   0
[41,] 4   0
[42,] 4   0
[43,] 2   1
[44,] 5   0
[45,] 2   1
[46,] 2   1
[47,] 2   1
[48,] 2   1
[49,] 1   0
[50,] 1   0
> 
> # Given this selection, submatrices can be formed in case the analyses
> # are to be done for this subset only:
> 
>         friend1.data.w1 <- friend.data.w1[ use, use ]
>         friend1.data.w2 <- friend.data.w2[ use, use ]
>         drink1 <- drink[ use, ]
> 
> 
> 
> ################################################################################
> ###
> ### ---- PROCEED TO RscriptSNADescriptives.R FOR DESCRIPTIVE ANAYLSIS ----------
> ###
> ################################################################################
> ###############################################################################
> ###
> ### -- Rscript02SienaVariableFormat.R: a script for the introduction to RSiena --
> ###
> ###                               version January 17, 2012
> ###############################################################################
> #
> # The introductory script is divided into the following script files:
> # Rscript01DataFormat.R, followed by
> # RScriptSNADescriptives.R, code for descriptive analysis of the data, and
> # Rscript02SienaVariableFormat.R, which formats data and specifies the model, and
> # Rscript03SienaRunModel.R, which runs the model and estimates parameters
> # Rscript04SienaBehaviour.R, which illustrates an example of analysing the
> # coevolution of networks and behaviour
> # Written with contributions by Robin Gauthier, Tom Snijders, Ruth Ripley,
> # Johan Koskinen, and Paulina Preciado.
> #
> # This script, Rscript02SienaVariableFormat.R, sets up the variables for analysis.
> # The manipulations in this script requires that you have gone through the
> # first part, "CALLING THE DATA AND PRELIMINARY MANIPULATIONS",
> # of the script "Rscript01DataFormat.R" beforehand;
> # or that you have defined the data and the model by means of the
> # siena01Gui() function and have saved and loaded the results,
> # as described in Section 2.3.3 of the Siena manual.
> 
> #### FORMATING DATA ACCORDING TO THEIR ROLES AS VARIABLES IN A SIENA MODEL #####
> 
> # A number of objects need to be created in R, as preparations to letting
> # siena07 execute the estimation. This will be indicated by
> # A: dependent variables;
> # B: explanatory variables;
> # C: combination of dependent and explanatory variables;
> # D: model specification.
> 
> # ---- A. ----------------------------------------------------------------------
> # First we have to create objects for the dependent variables.
> 
> # sienaDependent creates a Siena network object from a matrix or array or list of
> # sparse matrix of triples.
> # This object will have the role of a dependent variable in the analysis.
> # The name of this network object (here: friendship) will be used
> # in the output file.
> 
>  friendship <- sienaDependent(
+                      array( c( friend.data.w1, friend.data.w2, friend.data.w3 ),
+                      dim = c( 50, 50, 3 ) ) )
> 
> # The integers in the dim() here refer to the number of nodes (senders,
> # receivers) and the number of waves.
> # This object is an array of dimension 50 x 50 x 3, representing
> # three adjacency matrices, with a number of attributes.
> # Note that this is an object
> 
>         class(friendship)
[1] "sienaDependent"
> 
> # with specific attributes and methods associated with it.
> # You can get the detailed information by requesting
> 
>         dim( friendship )
[1] 50 50  3
>         attributes( friendship )
$dim
[1] 50 50  3

$class
[1] "sienaDependent"

$type
[1] "oneMode"

$sparse
[1] FALSE

$nodeSet
[1] "Actors"

$netdims
[1] 50 50  3

> 
> # If you only are interested in the value of one particular attribute,
> # you can request this by, e.g.,
> 
>         attributes( friendship )$type
[1] "oneMode"
> 
> # The entire contents of the object are listed by typing
> 
> #       friendship
> 
> # but this gives a lot of output which you may not want,
> # hence the # sign in front.
> 
> # The function sienaDependent can also be used to create a behavior variable object
> # with the extra argument type = "behavior".
> # (Non-mentioned attributes get the default value, and in this case
> # oneMode is the default;  see below.)
> 
> # The 'drink' data (created in  RscriptDataFormat.R ) is made available as a
> # dependent behavior variable by the function
> 
>         drinkingbeh <- sienaDependent( drink, type = "behavior" )
> 
> # the class, class(drinkingbeh), is still sienaDependent
> 
> # (NB: only use the variable in ONE role in a given model:
> #  behavior variable or changing covariate!)
> 
> # The options available for a sienaDependent object are displayed when typing
> 
>         ?sienaDependent
sienaDependent                package:RSiena                 R Documentation

_F_u_n_c_t_i_o_n _t_o _c_r_e_a_t_e _a _S_i_e_n_a _n_e_t_w_o_r_k _o_b_j_e_c_t

_D_e_s_c_r_i_p_t_i_o_n:

     Creates a Siena network object from a matrix or array or list of
     sparse matrix of triples.

_U_s_a_g_e:

     sienaDependent(netarray, type=c("oneMode", "bipartite", "behavior"),
     nodeSet="Actors", sparse=is.list(netarray))
     
_A_r_g_u_m_e_n_t_s:

netarray: matrix (type="behavior" only) or array of values or list of
          sparse matrices of type "dgTMatrix"

    type: type of network, default "oneMode"

 nodeSet: character string naming the appropriate node set. A vector
          containing 2 character strings for a bipartite network:
          "rows" first, then "columns".

  sparse: logical: set to TRUE if the data is in sparse matrix format,
          FALSE otherwise

_D_e_t_a_i_l_s:

     Adds attributes so that the array or list of matrices can be used
     in a Siena model fit.

_V_a_l_u_e:

     An object of class "sienaDependent". An array or (networks only) a list
     of sparse matrices with attributes:

 netdims: Dimensions of the network or behavior variable. Senders,
          receivers (1 for behavior), periods

    type: oneMode, bipartite or behavior

  sparse: Boolean: whether a list of sparse matrices or not

 nodeSet: Character string with name(s) of node set(s)

_A_u_t_h_o_r(_s):

     Ruth Ripley

_R_e_f_e_r_e_n_c_e_s:

     See <URL: http://www.stats.ox.ac.uk/siena/>

_S_e_e _A_l_s_o:

     'sienaDataCreate'

_E_x_a_m_p_l_e_s:

     mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
     mynet2 <- sienaDependent(s50a, type="behavior")
     ## note that the following example works although the node sets do not exist!
     mynet3 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)),
     type="bipartite", nodeSet=c("senders", "receivers"))
     ## sparse matrix input - create some RSiena edgelists first
     library(Matrix)
     tmps501 <- as(Matrix(s501), "dgTMatrix")
     tmps502 <- as(Matrix(s502), "dgTMatrix")
     tmps503 <- as(Matrix(s503), "dgTMatrix")
     mymat1 <- cbind(tmps501@i + 1, tmps501@j + 1, 1, 1)
     mymat2 <- cbind(tmps502@i + 1, tmps502@j + 1, 1, 2)
     mymat3 <- cbind(tmps503@i + 1, tmps503@j + 1, 1, 3)
     mymat <- rbind(mymat1, mymat2, mymat3)
     library(Matrix)
     ## mymat includes all 3 waves
     mymatlist <- by(mymat, mymat[, 4], function(x)
         spMatrix(50, 50, x[, 1], x[, 2], x[, 3]))
     mynet4 <- sienaDependent(mymatlist)
     ## or alternatively
     mymat1 <- mymat[mymat[, 4] == 1, ]
     mymat2 <- mymat[mymat[, 4] == 2, ]
     mymat3 <- mymat[mymat[, 4] == 3, ]
     mymat1s <- spMatrix(50, 50, mymat1[, 1], mymat1[, 2], mymat1[, 3])
     mymat2s <- spMatrix(50, 50, mymat2[, 1], mymat2[, 2], mymat2[, 3])
     mymat3s <- spMatrix(50, 50, mymat3[, 1], mymat3[, 2], mymat3[, 3])
     mynet4 <- sienaDependent(list(mymat1s, mymat2s, mymat3s))
     
> 
> # This shows that next to one-mode (unipartite) and behavior dependent variables,
> # also two-mode (bipartite) dependent variables are possible.
> # You can infer that oneMode is the default type from the fact
> # that it is mentioned first.
> 
> # To create bipartite network objects you need two node sets and must create
> # the node sets too. The following is an example
> # (not really meaningful, just for the syntax):
> 
>  bfriendship <- sienaDependent(array(c(friend.data.w1, friend.data.w2, friend.data.w3),
+                                dim=c(50, 50, 3)),
+                                "bipartite", nodeSet=c("senders", "receivers"))
>  senders <- sienaNodeSet(50, nodeSetName="senders")
>  receivers <- sienaNodeSet(50, nodeSetName="receivers")
> 
> 
> # ---- B. ----------------------------------------------------------------------
> # Second we construct objects for the explanatory (independent) variables.
> # From the help request
> #       ?sienaDataCreate
> # we see that these can be of five kinds:
> 	# coCovar            Constant actor covariates
> 	# varCovar           Time-varying actor covariates
> 	# coDyadCovar        Constant dyadic covariates
> 	# varDyadCovar       Time-varying dyadic covariates
> 	# compositionChange  Composition change indicators
> 
> # You can get help about this by the following requests:
> #       ?coCovar
> #       ?varCovar
> #       ?coDyadCovar
> #       ?varDyadCovar
> #       ?sienaCompositionChange
> 
> # The variables available for this data set all are changing actor covariates.
> # For illustrative purposes, we use smoking as observed at the first wave
> # as a constant covariate:
> 
>         smoke1 <- coCovar( smoke[ , 1 ] )
> 
> # This selects the first column of smoke,
> # which contains the first wave observations,
> # and makes it available as a constant covariate.
> # This is the pattern for for evey covariate file, e.g.
> #       Attr1 <- coCovar( Covariate1 )
> # where Covariate1 is a matrix with dim(Covariate1) equal to n x 1
> # Note, if Covariates is a matrix with dim(Covariates) equal to n x p
> # you can create constant covariates through
> #       Attr1 <- coCovar(Covariates[,1])
> #       ...
> #       Attrk <- coCovar(Covariates[,k])
> 
> # We use the drinking data as a changing covariate.
> # The function varCovar creates a changing covariate object from a matrix;
> # the name comes from 'varying covariate'.
> 
>         alcohol <- varCovar( drink )
> 
> # You need at least 3 waves of a varying covariate to use it as varCovar as
> # the previous wave is used as a predictor of the next wave.
> 
> # The command
> 
>         attributes( alcohol )
$dim
[1] 50  3

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
[1] "V1" "V2" "V3"


$class
[1] "varCovar"

$nodeSet
[1] "Actors"

> 
> # will tell you the information that RSiena now has added to the drink data.
> 
> # ---- C. ----------------------------------------------------------------------
> # We now combine the dependent and independent variables.
> # The function sienaDataCreate creates a Siena data object from input networks,
> # covariates and composition change objects;
> # the objects that earlier were created by sienaDependent will have the role
> # of dependent variables, and similarly the other roles are predetermined
> # by creation by the functions coCovar, varCovar,
> # coDyadCovar, varDyadCovar, and sienaCompositionChange.
> 
>         mydata <- sienaDataCreate( friendship, smoke1, alcohol )
> 
> # You should now understand how the result of this differs from the
> # result of
> #       mybehdata <- sienaDataCreate( friendship, smoke1, drinkingbeh )
> 
> # If you would like to use different names, you could request this as follows:
> #        mydata <- sienaDataCreate( nominations = friendship, smoke1,
> #                                   drinking = alcohol )
> 
> # For bipartite networks you would have to specify the node sets, e.g.,
> 
>         mybidata <- sienaDataCreate(bfriendship,
+                                     nodeSets=list(senders, receivers))
> 
> # If you wish to use a covariate, the relevant nodeSet must match, e.g.,
>         balcohol <- varCovar(drink, nodeSet="senders")
>         mybidata <- sienaDataCreate(bfriendship, balcohol,
+                                     nodeSets=list(senders, receivers))
> 
> # but we will not use this in these scripts.
> # This finishes the data specification. Now we have to specify the model.
> #
> 
> # ---- D. ----------------------------------------------------------------------
> ################################################################################
> ###
> ### ---- DEFINING EFFECTS ------------------------------------------------------
> ###
> ################################################################################
> # The data set as combined in mydata implies a certain set of effects
> # that can be included in the specification of the model.
> # The function getEffects creates a dataframe of effects with a number of extra
> # properties for use in RSiena:
> 
>         myeff <- getEffects( mydata )
> 
> # mydata is needed as an argument as the effects depend on the number
> # and types of covariates and dependent variables.
> # Before we explain the object myeff and how we shall be going to use it,
> # we first produce a data description which is available now:
> 
>         print01Report( mydata, myeff, modelname = 's50_3_init' )
> 
> # This writes a basic report of the data to the file
> # s50_3_init.out in the current working directory. Locate and open it!
> # Inspecting this is important because it serves as a check and also contains
> # a number of descriptives.
> # In this description you can see that the third wave data for alcohol are not used.
> # This is because changing covariates are assumed to be constant from one wave until
> # immediately before the next wave, so that the values for the last wave are ignored.
> 
> # Let us now consider the myeff object, which is used to specify the model.
> # It is of the class "sienaEffects", and contains the model specification.
> # You can inspect the current model specification by simply requesting
> 
>        myeff
  effectName                          include fix   test  initialValue parm
1 constant friendship rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2 constant friendship rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3 outdegree (density)                 TRUE    FALSE FALSE   -1.46770   0   
4 reciprocity                         TRUE    FALSE FALSE    0.00000   0   
> 
> # For starting, the model specification is just a very limited default
> # (including rates of change, outdegree and reciprocity only)
> # To make a meaningful analysis, you will need to add to it.
> 
> # The rows of myeff correspond to the effects.
> # By requesting
> 
>         names( myeff )
 [1] "name"            "effectName"      "functionName"    "shortName"      
 [5] "interaction1"    "interaction2"    "type"            "basicRate"      
 [9] "include"         "randomEffects"   "fix"             "test"           
[13] "timeDummy"       "initialValue"    "parm"            "functionType"   
[17] "period"          "rateType"        "untrimmedValue"  "effect1"        
[21] "effect2"         "effect3"         "interactionType" "effectFn"       
[25] "statisticFn"     "netType"         "groupName"       "group"          
[29] "effectNumber"   
> 
> # you see the type of information that is stored about the effects,
> # i.e., the columns (variables) defined for the effects.
> # If desired, more information about these variables can be obtained
> # from the help files:
> #      ?getEffects
> 
> # Among these variables is the effectName.
> # The set of available effects can be inspected by requesting their names:
> 
>         myeff$effectName
  [1] "constant friendship rate (period 1)"       
  [2] "constant friendship rate (period 2)"       
  [3] "outdegree effect on rate friendship"       
  [4] "indegree effect on rate friendship"        
  [5] "reciprocity effect on rate friendship"     
  [6] "effect 1/outdegree on rate friendship"     
  [7] "effect smoke1 on rate"                     
  [8] "effect alcohol on rate"                    
  [9] "outdegree (density)"                       
 [10] "outdegree (density)"                       
 [11] "outdegree (density)"                       
 [12] "reciprocity"                               
 [13] "reciprocity"                               
 [14] "reciprocity"                               
 [15] "transitive triplets"                       
 [16] "transitive triplets"                       
 [17] "transitive triplets"                       
 [18] "transitive mediated triplets"              
 [19] "transitive mediated triplets"              
 [20] "transitive mediated triplets"              
 [21] "3-cycles"                                  
 [22] "3-cycles"                                  
 [23] "3-cycles"                                  
 [24] "transitive ties"                           
 [25] "transitive ties"                           
 [26] "transitive ties"                           
 [27] "betweenness"                               
 [28] "balance"                                   
 [29] "balance"                                   
 [30] "balance"                                   
 [31] "number of actors at distance 2"            
 [32] "number pairs at doubly achieved distance 2"
 [33] "dense triads"                              
 [34] "indegree - popularity"                     
 [35] "indegree - popularity"                     
 [36] "indegree - popularity"                     
 [37] "indegree - popularity (sqrt)"              
 [38] "indegree - popularity (sqrt)"              
 [39] "indegree - popularity (sqrt)"              
 [40] "outdegree - popularity"                    
 [41] "outdegree - popularity"                    
 [42] "outdegree - popularity"                    
 [43] "outdegree - popularity (sqrt)"             
 [44] "indegree - activity"                       
 [45] "indegree - activity (sqrt)"                
 [46] "outdegree - activity"                      
 [47] "outdegree - activity (sqrt)"               
 [48] "outdegree-trunc(#)"                        
 [49] "1/(outdegree + #)"                         
 [50] "GWESP I -> K -> J (#)"                     
 [51] "GWESP I <- K <- J (#)"                     
 [52] "GWESP I <- K -> J (#)"                     
 [53] "GWESP I -> K <- J (#)"                     
 [54] "GWESP I <> K <> J (#)"                     
 [55] "1/(outdegree+#)(outdegree+1+#)"            
 [56] "out-out degree^(1/#) assortativity"        
 [57] "out-out degree^(1/#) assortativity"        
 [58] "out-out degree^(1/#) assortativity"        
 [59] "out-in degree^(1/#) assortativity"         
 [60] "out-in degree^(1/#) assortativity"         
 [61] "out-in degree^(1/#) assortativity"         
 [62] "in-out degree^(1/#) assortativity"         
 [63] "in-out degree^(1/#) assortativity"         
 [64] "in-out degree^(1/#) assortativity"         
 [65] "in-in degree^(1/#) assortativity"          
 [66] "in-in degree^(1/#) assortativity"          
 [67] "in-in degree^(1/#) assortativity"          
 [68] "in-struct equivalence"                     
 [69] "smoke1 alter"                              
 [70] "smoke1 alter"                              
 [71] "smoke1 alter"                              
 [72] "smoke1 squared alter"                      
 [73] "smoke1 squared alter"                      
 [74] "smoke1 squared alter"                      
 [75] "smoke1 ego"                                
 [76] "smoke1 ego"                                
 [77] "smoke1 ego"                                
 [78] "smoke1 similarity"                         
 [79] "smoke1 similarity"                         
 [80] "smoke1 similarity"                         
 [81] "smoke1 similarity x reciprocity"           
 [82] "smoke1 similarity x reciprocity"           
 [83] "smoke1 similarity x reciprocity"           
 [84] "same smoke1"                               
 [85] "same smoke1"                               
 [86] "same smoke1"                               
 [87] "same smoke1 x reciprocity"                 
 [88] "same smoke1 x reciprocity"                 
 [89] "same smoke1 x reciprocity"                 
 [90] "smoke1 ego x smoke1 alter"                 
 [91] "smoke1 ego x smoke1 alter"                 
 [92] "smoke1 ego x smoke1 alter"                 
 [93] "smoke1 ego x smoke1 alter x recipr."       
 [94] "smoke1 ego x smoke1 alter x recipr."       
 [95] "smoke1 ego x smoke1 alter x recipr."       
 [96] "higher smoke1"                             
 [97] "higher smoke1"                             
 [98] "higher smoke1"                             
 [99] "smoke1 of indirect ties"                   
[100] "smoke1 alter at distance 2 (#)"            
[101] "smoke1 alter at distance 2 (#)"            
[102] "smoke1 alter at distance 2 (#)"            
[103] "smoke1 similarity at distance 2"           
[104] "smoke1 similarity at distance 2"           
[105] "smoke1 similarity at distance 2"           
[106] "alcohol alter"                             
[107] "alcohol alter"                             
[108] "alcohol alter"                             
[109] "alcohol squared alter"                     
[110] "alcohol squared alter"                     
[111] "alcohol squared alter"                     
[112] "alcohol ego"                               
[113] "alcohol ego"                               
[114] "alcohol ego"                               
[115] "alcohol similarity"                        
[116] "alcohol similarity"                        
[117] "alcohol similarity"                        
[118] "alcohol similarity x reciprocity"          
[119] "alcohol similarity x reciprocity"          
[120] "alcohol similarity x reciprocity"          
[121] "same alcohol"                              
[122] "same alcohol"                              
[123] "same alcohol"                              
[124] "same alcohol x reciprocity"                
[125] "same alcohol x reciprocity"                
[126] "same alcohol x reciprocity"                
[127] "alcohol ego x alcohol alter"               
[128] "alcohol ego x alcohol alter"               
[129] "alcohol ego x alcohol alter"               
[130] "alcohol ego x alcohol alter x recipr."     
[131] "alcohol ego x alcohol alter x recipr."     
[132] "alcohol ego x alcohol alter x recipr."     
[133] "higher alcohol"                            
[134] "higher alcohol"                            
[135] "higher alcohol"                            
[136] "alcohol of indirect ties"                  
[137] "alcohol alter at distance 2 (#)"           
[138] "alcohol alter at distance 2 (#)"           
[139] "alcohol alter at distance 2 (#)"           
[140] "alcohol similarity at distance 2"          
[141] "alcohol similarity at distance 2"          
[142] "alcohol similarity at distance 2"          
[143] "unspecified interaction effect"            
[144] "unspecified interaction effect"            
[145] "unspecified interaction effect"            
[146] "unspecified interaction effect"            
[147] "unspecified interaction effect"            
[148] "unspecified interaction effect"            
[149] "unspecified interaction effect"            
[150] "unspecified interaction effect"            
[151] "unspecified interaction effect"            
[152] "unspecified interaction effect"            
[153] "unspecified interaction effect"            
[154] "unspecified interaction effect"            
[155] "unspecified interaction effect"            
[156] "unspecified interaction effect"            
[157] "unspecified interaction effect"            
[158] "unspecified interaction effect"            
[159] "unspecified interaction effect"            
[160] "unspecified interaction effect"            
[161] "unspecified interaction effect"            
[162] "unspecified interaction effect"            
[163] "unspecified interaction effect"            
[164] "unspecified interaction effect"            
[165] "unspecified interaction effect"            
[166] "unspecified interaction effect"            
[167] "unspecified interaction effect"            
[168] "unspecified interaction effect"            
[169] "unspecified interaction effect"            
[170] "unspecified interaction effect"            
[171] "unspecified interaction effect"            
[172] "unspecified interaction effect"            
> 
> # This gives a lot of names: all effects defined in Section 12 of the manual,
> # depending on the variables specified in mydata.
> # The "include" column defines whether effects are included in the model.
> 
>         myeff$include
  [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[169] FALSE FALSE FALSE FALSE
> 
> # Here the TRUE values correspond to the default model specification which,
> # however, is not meant as a serious model, being too limited.
> # There are 3 main ways to operate on myeff.
> # 1. Changing myeff in spreadsheet form by the function fix();
> # 2. Changing myeff directly by operating on its elements;
> # 3. Using RSiena functions "includeEffects", "setEffects", etc.
> # Which one to use is a matter of personal preference.
> # The third way is most in line with the design philosophy of R,
> # and allows you to save scripts that also can be used when
> # there will be new versions of RSiena.
> # Therefore, we suggest that you skip the explanations of options 1 and 2, and
> # proceed directly to option 3, ' Adding/removing effects using includeEffects'.
> 
> # For identifying your effects you need the "shortName"s,
> # which can be read in the manual (section "Mathematical definition of effects"),
> # or obtained from the "sink" command below.
> 
> # ---- 1. Adding/removing effects using fix() ----------------------------------
> # fix calls a data editor internal to R, so we can manually edit the effects.
> # This operates the same as in the Gui.
> 
>         fix( myeff )
> 
> # How to use fix() is presented merely for getting to know what myeff is.
> # In practical analysis it is more convenient
> # to use routine "includeEffects" instead, as explained below.
> # fix() may not be usable if you do not have tcl/tk available!
> # Note that the top of the dataframe shows the names of the columns:
> # name, effectName, etc.
> # You can edit the "include" column by changing the TRUE and FALSE values
> # as required; when the editor is closed, the new values are stored.
> 
> # ---- 2. Adding/removing effects by direct manipulation of myeff --------------
> # Alternatively we can edit the dataframe directly by using R functions.
> # You are advised to skip this part ("2.") at first reading,
> # and read it only if you wish to get more understanding
> # of the interal strtucture of the effects object.
> # The commands below are used to set "include" to TRUE or FALSE,
> # as an alternative to using the data editor.
> # The "include" column with values TRUE or FALSE will always be
> # ocated at the 9th column,
> # but transitive triplets will not always be at the 13th row as this depends
> # on the number of periods and variables; further, the list of available effects
> # may change in future versions.
> # Note: These row numbers may not be the current ones, as they depend on the
> # list of effects implemented, which is changeable.
> # Some examples are the following
> # (preceded by # because not proposed to be applied).
> 
>         #myeff[13,9] <- TRUE   #transitive triples
>         #myeff[17,9] <- TRUE   #3 cycles
>         #myeff[19,9] <- TRUE   #transitive ties
>         #myeff[29,9] <- TRUE   #indegree popularity (sqrt)
>         #myeff[33,9] <- TRUE   #outdegree popularity (sqrt)
>         #myeff[35,9] <- TRUE   #indegree based activity (sqrt)
>         #myeff[37,9] <- TRUE   #outdegree based activity (sqrt)
>         #myeff[46,9] <- TRUE   #indegree-indegree assortativity
>         #myeff[69,9] <- TRUE   #alcohol alter
>         #myeff[73,9] <- TRUE   #alcohol ego
>         #myeff[75,9] <- TRUE   #alcohol similarity
>         #myeff[83,9] <- TRUE   #alcohol ego x alcohol alter
> 
> # But in other choices of data, the effect numbers will change.
> # This is a reason why this is not a convenient method.
> # The following methods require more typing the first time,
> # but can be re-used much more robustly.
> # Several variants are given, so that you can use what suits you best.
> # We give a small and meaningful model.
> 
> # To understand the R commands, recall that myeff is a matrix,
> # i.e., a two-dimensional array,
> # and myeff[i,j] refers to row/effect i and its characteristic j.
> # A file with the effect names, for easy access to their exact wordings,
> # is obtained by the following commands.
> # The function sink diverts output to a file;
> # the last command sink() directs it to the console again.
> # The function cbind combines two columns into a matrix,
> # and is used here to get effect names and short names next to each other.
> 
>      sink("effectlist.txt")
>      cbind( myeff$effectName,myeff$shortName)
>      sink()
> 
> # Another way to get this information is by the command
> 
> # write.table(format(cbind( myeff$effectName,myeff$shortName)),"effectlist.txt")
> 
> # Now look in the file "effectlist.txt" (in the current directory)
> # for the spelling of the various effects you might wish to use.
> # The following commands can be used to select the
> # five mentioned effects.
> # Note that == is the logical "equals", & is the logical "and",
> # and what is between the square brackets [...] makes a selection
> # of the specified row and column of the "myeff" data frame.
> 
>         myeff[myeff$effectName=='transitive triplets' &
+               myeff$type=='eval', 'include'] <- TRUE
>         myeff[myeff$effectName=='3-cycles' &
+               myeff$type=='eval', 'include'] <- TRUE
>         myeff[myeff$effectName=='smoke1 similarity' &
+               myeff$type=='eval', 'include'] <- TRUE
>         myeff[myeff$effectName=='alcohol alter' &
+               myeff$type=='eval', 'include'] <- TRUE
>         myeff[myeff$effectName=='alcohol ego' &
+               myeff$type=='eval', 'include'] <- TRUE
>         myeff[myeff$effectName=='alcohol ego x alcohol alter' &
+               myeff$type=='eval', 'include'] <- TRUE
> 
> # You can similarly add other ones.
> # If you make a typing error in the effect name, there will be no warning,
> # but also no consequence of your command.
> # Therefore it is good to check the results,
> # by requesting the list of effects now included in the model:
> 
>         myeff
   effectName                          include fix   test  initialValue parm
1  constant friendship rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2  constant friendship rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3  outdegree (density)                 TRUE    FALSE FALSE   -1.46770   0   
4  reciprocity                         TRUE    FALSE FALSE    0.00000   0   
5  transitive triplets                 TRUE    FALSE FALSE    0.00000   0   
6  3-cycles                            TRUE    FALSE FALSE    0.00000   0   
7  smoke1 similarity                   TRUE    FALSE FALSE    0.00000   0   
8  alcohol alter                       TRUE    FALSE FALSE    0.00000   0   
9  alcohol ego                         TRUE    FALSE FALSE    0.00000   0   
10 alcohol ego x alcohol alter         TRUE    FALSE FALSE    0.00000   0   
> 
> # ---- 3. Adding/removing effects using includeEffects -------------------------
> # A third way of specifying the model is by the includeEffects function.
> # This function uses short names instead of full names.
> # The short names are listed in the descriptions given in
> # Section 12 of the manual.
> # A list of the short names can also be obtained by
> 
>         sink("effectshortlist.txt")
>         myeff$shortName
>         sink()
> 
> # This will create a file in your working directory named "effectshortlist.txt"
> # A more general table of effect information including short names
> # is also available as a pdf file in the R directory, and can be opened by
> 
>         RShowDoc("effects", package="RSiena")
> 
> # or created and opened as a html file in the current directory by the function
> 
>         # effectsDocumentation()
> 
> # For illustration, let us start from scratch with a new sienaEffects object,
> # and add the transitive triples and 3-cycles effects
> 
>         myeff <- getEffects( mydata )
>         myeff <- includeEffects( myeff, transTrip, cycle3 )
                            name shortName type interaction1 interaction2
friendship.obj.eval.3 friendship transTrip eval                          
friendship.obj.eval.5 friendship    cycle3 eval                          
                      include
friendship.obj.eval.3    TRUE
friendship.obj.eval.5    TRUE
> 
> # Note that we can set several effects in one go!
> # To remove: myeff[ myeff$shortName == '<<shortName>>', ]$include <- FALSE
> # e.g. if
> #       myeff <- includeEffects( myeff, cycle3 )
> # and you want to remove this effect
> #       myeff[ myeff$shortName == 'cycle3', ]$include <- FALSE
> # Or, more conveniently, switch "include" to FALSE to turn off an effect.
> #       myeff <- includeEffects( myeff, cycle3, include = FALSE )
> 
> # Check again which effects you have included:
> 
>         myeff
  effectName                          include fix   test  initialValue parm
1 constant friendship rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2 constant friendship rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3 outdegree (density)                 TRUE    FALSE FALSE   -1.46770   0   
4 reciprocity                         TRUE    FALSE FALSE    0.00000   0   
5 transitive triplets                 TRUE    FALSE FALSE    0.00000   0   
6 3-cycles                            TRUE    FALSE FALSE    0.00000   0   
> 
> # ---- Adding/removing covariate related effects -------------------------------
> # The short names do not differentiate between the covariates:
> # e.g., the effects 'alcohol ego' and 'smoke1 ego' both have short name 'egoX',
> # and the command
> 
>         myeff <- includeEffects( myeff, egoX )
[1] name         shortName    type         interaction1 interaction2
[6] include     
<0 rows> (or 0-length row.names)
> 
> # results in a message that does not (like the earlier one)
> # confirm the newly included effect.
> # The covariates are indicated by the variable "interaction1"
> # in the sienaEffects object,
> # and this has to be mentioned to include these effects:
> 
>         myeff <- includeEffects( myeff, egoX, altX, egoXaltX,
+                                  interaction1 = "alcohol" )
                             name shortName type interaction1 interaction2
friendship.obj.eval.46 friendship      altX eval      alcohol             
friendship.obj.eval.48 friendship      egoX eval      alcohol             
friendship.obj.eval.53 friendship  egoXaltX eval      alcohol             
                       include
friendship.obj.eval.46    TRUE
friendship.obj.eval.48    TRUE
friendship.obj.eval.53    TRUE
>         myeff <- includeEffects( myeff, simX, interaction1 = "smoke1" )
                             name shortName type interaction1 interaction2
friendship.obj.eval.36 friendship      simX eval       smoke1             
                       include
friendship.obj.eval.36    TRUE
> 
> # We check the results again:
> 
>         myeff
   effectName                          include fix   test  initialValue parm
1  constant friendship rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2  constant friendship rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3  outdegree (density)                 TRUE    FALSE FALSE   -1.46770   0   
4  reciprocity                         TRUE    FALSE FALSE    0.00000   0   
5  transitive triplets                 TRUE    FALSE FALSE    0.00000   0   
6  3-cycles                            TRUE    FALSE FALSE    0.00000   0   
7  smoke1 similarity                   TRUE    FALSE FALSE    0.00000   0   
8  alcohol alter                       TRUE    FALSE FALSE    0.00000   0   
9  alcohol ego                         TRUE    FALSE FALSE    0.00000   0   
10 alcohol ego x alcohol alter         TRUE    FALSE FALSE    0.00000   0   
> 
> # By looking at the help offered by
> 
>         ?includeEffects
includeEffects             package:RSiena              R Documentation

_F_u_n_c_t_i_o_n _t_o _i_n_c_l_u_d_e _e_f_f_e_c_t_s _i_n _a _S_i_e_n_a _m_o_d_e_l

_D_e_s_c_r_i_p_t_i_o_n:

     This function provides an interface to set the include column on
     selected rows of a Siena effects object

_U_s_a_g_e:

     includeEffects(myeff, ..., include = TRUE, name = myeff$name[1],
      type = "eval", interaction1 = "", interaction2 = "", character=FALSE)
     
_A_r_g_u_m_e_n_t_s:

   myeff: a Siena effects object as created by 'getEffects'

     ...: short names to identify the effects which should be included
          or excluded.

 include: Boolean. default TRUE, but can be switched to FALSE to turn
          off an effect.

    name: Name of network for which effects are being included.
          Defaults to the first in the effects object.

    type: Type of effects to be included.

interaction1: Name of siena object where needed to completely identify
          the effects e.g. covariate name or behavior variable name.

interaction2: Name of siena object where needed to completely identify
          the effects e.g. covariate name or behavior variable name.

character: Boolean: are the effect names character strings or not

_D_e_t_a_i_l_s:

     The arguments should identify the effects completely. The include
     column will be set to the value requested (TRUE or FALSE).

_V_a_l_u_e:

     An updated version of the input effects object, with the include
     columns for one or more rows updated.  Details of the rows altered
     will be printed.

_A_u_t_h_o_r(_s):

     Ruth Ripley

_R_e_f_e_r_e_n_c_e_s:

     See <URL: http://www.stats.ox.ac.uk/~snijders/siena/>

_S_e_e _A_l_s_o:

     'getEffects'

_E_x_a_m_p_l_e_s:

     mynet1 <- sienaDependent(array(c(s501, s502, s503), dim=c(50, 50, 3)))
     mynet2 <- sienaDependent(s50a, type="behavior")
     mydata <- sienaDataCreate(mynet1, mynet2)
     myeff <- getEffects(mydata)
     myeff <- includeEffects(myeff, transTrip, balance)
     myeff <- includeEffects(myeff, avAlt, name="mynet2", interaction1="mynet1")
     
> 
> # you can see how to include endowment effects and how to exclude effects.
> # Effects that depend on other variables, such as egoX, altX, etc. above,
> # need the specification of these variables to define them.
> # This is done by the interaction1 parameter
> # when only one variable name is needed,
> # and by interaction2 if there is a second variable involved,
> # such as AltsAvAlt (see the manual).
> 
> 
> # ---- Creating interactions ---------------------------------------------------
> # As a special topic, let us show how interaction effects are created.
> 
> # A convenient method to include an interaction is offered by the
> # includeInteraction function.
> # This can be used to interact two or three effects
> # (if the interactions are allowed; see the manual for this).
> # The interaction between smoke1 ego and reciprocity, for instance,
> # can be defined by the command
> 
>         myeff <- includeInteraction( myeff, egoX, recip, include = FALSE,
+                                     interaction1 = c("smoke1","") )
[1] name         shortName    type         interaction1 interaction2
[6] include      effect1      effect2      effect3     
<0 rows> (or 0-length row.names)
> 
> # and, e.g., an interaction between smoke1 ego and alcohol ego is defined by
> 
> #        myeff <- includeInteraction( myeff, egoX, egoX, include = FALSE,
> #                                    interaction1 = c( "smoke1", "alcohol" ) )
> 
> # where we now specified "include = FALSE" because we wish to make this effect
> # available without using it in in the model to be estimated below.
> 
> # Note that the keyword 'interaction1' used by RSiena is used for identifying
> # the covariate for which the ego effect is selected, and does not
> # refer to the interaction effect itself.
> # If at least one of the interacting effects requires the interaction1 parameter
> # for it specification, then this parameter is also required for the
> # includeInteraction function.
> # Here the two or three interaction1 parameters must be combined using c();
> # the same goes for interaction2.
> 
> # A second special topic is how to access other characteristics of effects
> # without referring to the effect numbers.
> # This can be done by the setEffect function.
> # E.g., the dense triads effects
> # counts the number of triplets with at least xx ties,
> # where xx is the parameter of the effect, which can be 5 or 6
> # (note that 6 is the maximum number of ties in a triplet).
> # The default is 5. This is changed to 6 by the command
> 
>         myeff <- setEffect(myeff, denseTriads, include = FALSE, parameter = 6)
                             name   shortName type interaction1 interaction2
friendship.obj.eval.11 friendship denseTriads eval                          
                       include parm   fix  test initialValue timeDummy period
friendship.obj.eval.11   FALSE    6 FALSE FALSE            0         ,   <NA>
                       group
friendship.obj.eval.11     1
> 
> # The 'parameter' keyword refers to the effect parameter, described in
> # Section 12 of the manual.
> 
> ################################################################################
> ###
> ### -- PROCEED TO Rscript03SienaRunModel.R FOR PARAMETER ESTIMATION BY RSIENA --
> ###
> ################################################################################
> ################################################################################
> ###
> ###
> ### ---- Rscript03SienaRunModel.R: a script for the introduction to RSiena -------
> ###
> ###                         version January 17, 2012
> ################################################################################
> #
> # The introductory script is divided into the following script files:
> # Rscript01DataFormat.R, followed by
> # RScriptSNADescriptives.R, code for descriptive analysis of the data, and
> # Rscript02SienaVariableFormat.R, which formats data and specifies the model, and
> # Rscript03SienaRunModel.R, which runs the model and estimates parameters
> # Rscript04SienaBehaviour.R, which illustrates an example of analysing the
> # coevolution of networks and behaviour.
> # Written with contributions by Robin Gauthier, Tom Snijders, Ruth Ripley,
> # Johan Koskinen, and Paulina Preciado.
> #
> # This script, Rscript03SienaRunModel.R, runs the estimation in RSiena for the
> # model set up and defined in the script Rscript02SienaVariableFormat.R.
> #
> # A quick version of the model fitting without comments is given at the end
> # of this script
> 
> ########################### ESTIMATION OF PARAMETERS ###########################
> 
> # Parameters of the model are estimated by the function siena07.
> # This requires the data specification; the effects specification;
> # and a number of parameters, or settings, for the estimation algorithm.
> # The latter are contained in an object created by the function sienaModelCreate.
> # You can look at the help provided by ?sienaModelCreate
> # to find out about options that you may use here;
> # for beginning users, only the two options mentioned below are relevant.
> #
> # Output will be written to a file with name projname.out, where projname is
> # whatever name is given; the default (used if no name is given) is Siena.
> # This file will be written to your current directory.
> # New estimation runs will append to it.
> # A new call to print01Report will overwrite it!
> 
>         mymodel <- sienaModelCreate(useStdInits = FALSE, projname = 's50_3')
> 
> # The useStdInits parameter determines the initial values used for
> # the estimation algorithm.
> # If useStdInits = TRUE, standard initial values are used;
> # if useStdInits = FALSE, the initial values are used that are contained
> # in the "initialValue" column of the effects object,
> # which were reported above by the information request
> #       myeff
> # Below we shall see how these initial values can be altered.
> 
> # The function siena07 actually fits the specified model to the data
> # If you wish the pretty picture of Siena on the screen as information
> # about the progress of the algorithm, type
> 
>  	ans <- siena07( mymodel, data = mydata, effects = myeff)
Loading Tcl/Tk interface ... done
> 
> # (ans for "answer").
> # If however you do not want the pretty picture, or if this leads to
> # difficulties (which may happen e.g. on a Mac), then type
> 
> #  ans <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE)
> 
> # and intermediate information will be written to the console.
> 
> # Function siena07 produces a so-called sienaFit object, here called ans;
> # and it fills in a few things in the sienaEffects object myeff,
> # if this is the first use of myeff in a siena07 call.
> # By using various different effects objects, i.e., with different names,
> # you can switch between specifications.
> 
> # The batch = FALSE parameters will give a graphical user interface being opened
> # which reports on the progress of the estimation algorithm;
> 
> # verbose = TRUE leads to extensive diagnostic information being sent
> # to the console during the estimation, and results after the estimation
> # (these results are also copied to the output file projname.out, mentioned above);
> # while batch=TRUE gives only a limited amount of printout sent to the console
> # during the estimation (which is seen when clicking in the console,
> # or more immediately if the Buffered Output is deselected in the Misc menu)
> # which monitors the progress of the estimation algorithm in  a different way.
> 
> # The call of siena07 leads to output in the file s50_3.out
> # (or more generally projname.out,
> # where projname is the name given in sienaModelCreate)
> # and to the creation of the object which here is called ans (for "answer").
> 
> # To use multiple processors, in the simplest case where your computer has 2
> # processors, use
> 
> #         ans <- siena07( mymodel, data = mydata, effects = myeff, batch = TRUE,
> #                        verbose = TRUE, nbrNodes = 2, useCluster = TRUE)
> 
> # Adjust the nbrNodes to the number available.
> # If you wish to work on with other programs while running siena07,
> # it is advisable to use one node less than the number of available processors.
> # If you wish to use other machines as well,
> # see the more detailed instructions below.
> # You will then need to use the clusterString argument as well.
> #
> # For more advanced use, it can be helpful to have access to the networks
> # simulated in the so-called third phase of the estimation algorithm.
> # These networks can be used, e.g., for checking goodness of fit.
> # This can be achieved by using the parameter returnDeps=TRUE.
> # The fitted object ans will then have a component named "sims"
> # which contains a list (each iteration) of lists (each data object)
> # of lists (each dependent network or behavior variable) of edgelists for
> # networks or vectors for behavior variables.
> #
> # This option when used with multiple processors would require
> # rather a lot of communication between multiple processes,
> # slowing down the computations,
> # so it might be better to avoid using the two options together.
> 
> 
> ################### LOOKING AT THE RESULTS ################################
> 
> # The file "s50_3.out" will contain the results of the estimation.
> # It is contained in the current directory ("getwd()").
> # This file can be read by any text editor.
> # A summary of the results is obtained on the screen by
> 
>            ans
Estimates, standard errors and convergence t-ratios

                                       Estimate   Standard   Convergence 
                                                    Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1      6.5688  ( 1.1560   )             
  0.2      Rate parameter period 2      5.1635  ( 0.8640   )             

Other parameters: 
  1.  eval outdegree (density)         -2.7108  ( 0.1291   )    0.0399   
  2.  eval reciprocity                  2.4158  ( 0.2313   )   -0.0083   
  3.  eval transitive triplets          0.6463  ( 0.1456   )   -0.0320   
  4.  eval 3-cycles                    -0.0869  ( 0.2803   )   -0.0297   
  5.  eval smoke1 similarity            0.2468  ( 0.2081   )   -0.0038   
  6.  eval alcohol alter               -0.0208  ( 0.0683   )   -0.0007   
  7.  eval alcohol ego                  0.0328  ( 0.0712   )   -0.0104   
  8.  eval alcohol ego x alcohol alter  0.1299  ( 0.0485   )    0.0511   

Total of 2254 iteration steps.

> 
> # and a larger summary by
> 
>            summary(ans)
Estimates, standard errors and convergence t-ratios

                                       Estimate   Standard   Convergence 
                                                    Error      t-ratio   

Rate parameters: 
  0.1      Rate parameter period 1      6.5688  ( 1.1560   )             
  0.2      Rate parameter period 2      5.1635  ( 0.8640   )             

Other parameters: 
  1.  eval outdegree (density)         -2.7108  ( 0.1291   )    0.0399   
  2.  eval reciprocity                  2.4158  ( 0.2313   )   -0.0083   
  3.  eval transitive triplets          0.6463  ( 0.1456   )   -0.0320   
  4.  eval 3-cycles                    -0.0869  ( 0.2803   )   -0.0297   
  5.  eval smoke1 similarity            0.2468  ( 0.2081   )   -0.0038   
  6.  eval alcohol alter               -0.0208  ( 0.0683   )   -0.0007   
  7.  eval alcohol ego                  0.0328  ( 0.0712   )   -0.0104   
  8.  eval alcohol ego x alcohol alter  0.1299  ( 0.0485   )    0.0511   

Total of 2254 iteration steps.

Covariance matrix of estimates (correlations below diagonal)

       0.017       -0.020       -0.009        0.011       -0.005        0.000       -0.001       -0.001
      -0.660        0.054        0.012       -0.031        0.002        0.001        0.000        0.000
      -0.471        0.355        0.021       -0.035        0.002        0.000       -0.001       -0.001
       0.310       -0.475       -0.855        0.079       -0.004       -0.002        0.002        0.002
      -0.201        0.050        0.055       -0.065        0.043        0.004        0.002       -0.001
      -0.010        0.041        0.045       -0.090        0.259        0.005       -0.002        0.000
      -0.070        0.023       -0.123        0.105        0.137       -0.331        0.005        0.000
      -0.123        0.017       -0.173        0.140       -0.077       -0.128       -0.067        0.002

Derivative matrix of expected statistics X by parameters:

     289.341      234.150      507.672      159.317       26.954       32.951       41.670      147.355
     127.537      139.071      257.687       85.660       13.505        8.687        6.255       54.965
     341.795      313.223     1126.888      358.652       29.127       78.645       81.039      208.215
     161.154      159.353      540.390      182.268       14.853       32.146       25.557       80.350
      26.325       22.213       41.160       13.500       34.255      -40.629      -34.299       10.701
      20.062       29.657      129.891       42.947      -45.176      351.377      217.055       94.188
      39.427       30.062      118.080       35.785      -36.666      221.286      311.524      100.817
     149.444      131.048      350.060      109.849        8.671      111.230      106.890      631.970

Covariance matrix of X (correlations below diagonal):

     461.489      409.948     1110.543      355.905       41.138       63.699       64.122      244.437
       0.932      419.106     1091.513      355.245       39.693       69.479       54.080      232.016
       0.814        0.840     4032.851     1304.381       95.092      280.466      237.738      675.395
       0.801        0.839        0.993      428.205       30.619       91.183       74.329      216.733
       0.290        0.294        0.227        0.224       43.558      -68.626      -62.753        9.802
       0.135        0.154        0.201        0.200       -0.473      483.677      373.496      175.431
       0.145        0.128        0.182        0.175       -0.462        0.826      422.663      168.222
       0.401        0.399        0.374        0.369        0.052        0.281        0.288      806.613
> 
> # Depending on the random seed and the model specification,
> # the results could be something like the following.
> 
> # Estimates, standard errors and t-statistics for convergence
> #
> #                                        Estimate   Standard   t statistic
> #                                                     Error
> #
> # Rate parameters:
> #   0.1      Rate parameter period 1      6.5644  ( 1.1020   )
> #   0.2      Rate parameter period 2      5.1981  ( 0.8611   )
> #
> # Other parameters:
> #   1.  eval outdegree (density)         -2.7027  ( 0.1253   ) -0.0025
> #   2.  eval reciprocity                  2.3894  ( 0.2157   ) -0.0335
> #   3.  eval transitive triplets          0.6111  ( 0.1392   ) -0.0247
> #   4.  eval 3-cycles                    -0.0069  ( 0.2731   )  0.0126
> #   5.  eval smoke1 similarity            0.2595  ( 0.2107   )  0.0144
> #   6.  eval alcohol alter               -0.0195  ( 0.0699   ) -0.0155
> #   7.  eval alcohol ego                  0.0374  ( 0.0801   ) -0.0681
> #   8.  eval alcohol ego x alcohol alter  0.1297  ( 0.0527   ) -0.0001
> #
> 
> # The results can also be viewed externally in the output file s50_3.out
> # It is advisable that you have a look at all three reports and
> # understand how information is organized in each of them.
> 
> # To understand the table above, note that the "t statistic"
> # is the t-statistic for convergence checking,
> # not the t statistic for testing the significance of this effect!
> # (See Section 6.2 of the manual.)
> # In the external output file, these are called
> # "t-ratios for deviations from targets".
> # The rule of thumb is that all t-ratios for convergence
> # should ideally be less than 0.1 in absolute value;
> # this signifies good convergence of the algorithm.
> # In the example here, this is the case.
> # If this would not be the case, the best thing to do would be
> # to continue the estimation, using the estimates produced here,
> # and contained in ans, as the new initial values.
> # This is explained below.
> 
> # With function siena07 we made ans as the object containing
> # all the results of the estimation. For example,
> 
>         ans$theta
[1] -2.71081403  2.41575411  0.64625845 -0.08692340  0.24683046 -0.02080773
[7]  0.03277951  0.12987306
> 
> # contains the vector of parameter estimates while
> 
>         ans$covtheta
              [,1]          [,2]          [,3]         [,4]         [,5]
[1,]  1.665663e-02 -0.0197060059 -0.0088517141  0.011202275 -0.005389970
[2,] -1.970601e-02  0.0535167184  0.0119593474 -0.030795330  0.002416403
[3,] -8.851714e-03  0.0119593474  0.0212110015 -0.034884375  0.001675581
[4,]  1.120227e-02 -0.0307953299 -0.0348843746  0.078541180 -0.003780916
[5,] -5.389970e-03  0.0024164033  0.0016755807 -0.003780916  0.043309393
[6,] -9.092678e-05  0.0006490970  0.0004517941 -0.001728489  0.003681735
[7,] -6.433863e-04  0.0003713283 -0.0012747480  0.002090973  0.002030272
[8,] -7.687170e-04  0.0001937755 -0.0012199396  0.001909319 -0.000774341
              [,6]          [,7]          [,8]
[1,] -9.092678e-05 -0.0006433863 -0.0007687170
[2,]  6.490970e-04  0.0003713283  0.0001937755
[3,]  4.517941e-04 -0.0012747480 -0.0012199396
[4,] -1.728489e-03  0.0020909727  0.0019093189
[5,]  3.681735e-03  0.0020302725 -0.0007743410
[6,]  4.667603e-03 -0.0016102622 -0.0004230673
[7,] -1.610262e-03  0.0050710947 -0.0002308559
[8,] -4.230673e-04 -0.0002308559  0.0023518431
> 
> # contains the covariance matrix of the estimates.
> # There are several "methods" available for viewing the object
> # containing the results of the estimation.
> # Above we already mentioned
> #        ans
> # and
> #        summary( ans )
> # The command
> 
>         xtable( ans )
% latex table generated in R 2.15.1 by xtable 1.7-0 package
% Fri Mar 22 14:16:41 2013
\begin{table}[ht]
\begin{center}
\begin{tabular}{llllrlrlr}
  \hline
  \multicolumn{4}{l}{ Rate parameters:  } \\ 
 \hline
  & 0.1 &  & Rate parameter period 1 & 6.57 & ( & 1.16 & ) &  \\ 
    & 0.2 &  & Rate parameter period 2 & 5.16 & ( & 0.86 & ) &  \\ 
   \\  \multicolumn{4}{l}{ Other parameters:  } \\ 
  & 1. & eval & outdegree (density) & -2.71 & ( & 0.13 & ) & 0.04 \\ 
    & 2. & eval & reciprocity & 2.42 & ( & 0.23 & ) & -0.01 \\ 
    & 3. & eval & transitive triplets & 0.65 & ( & 0.15 & ) & -0.03 \\ 
    & 4. & eval & 3-cycles & -0.09 & ( & 0.28 & ) & -0.03 \\ 
    & 5. & eval & smoke1 similarity & 0.25 & ( & 0.21 & ) & -0.00 \\ 
    & 6. & eval & alcohol alter & -0.02 & ( & 0.07 & ) & -0.00 \\ 
    & 7. & eval & alcohol ego & 0.03 & ( & 0.07 & ) & -0.01 \\ 
    & 8. & eval & alcohol ego x alcohol alter & 0.13 & ( & 0.05 & ) & 0.05 \\ 
   \hline
\end{tabular}
\end{center}
\end{table}
> 
> # will produce a table formatted for inclusion in a LaTeX document
> # or formatted in html. Use e.g.
> 
>         xtable( ans, type = 'html' )
<!-- html table generated in R 2.15.1 by xtable 1.7-0 package -->
<!-- Fri Mar 22 14:16:41 2013 -->
<TABLE border=1>
  <TR> <TD colspan=9 align=left> Rate parameters:  </TD> </TR> <TR> </TR> 
 <TR> <TD>   </TD> <TD> 0.1 </TD> <TD>  </TD> <TD> Rate parameter period 1 </TD> <TD align="right"> 6.57 </TD> <TD> ( </TD> <TD align="right"> 1.16 </TD> <TD> ) </TD> <TD align="right">  </TD> </TR>
  <TR> <TD>   </TD> <TD> 0.2 </TD> <TD>  </TD> <TD> Rate parameter period 2 </TD> <TD align="right"> 5.16 </TD> <TD> ( </TD> <TD align="right"> 0.86 </TD> <TD> ) </TD> <TD align="right">  </TD> </TR>
   <TR> <TD colspan=9 align=left> Other parameters:  </TD> </TR> <TR> </TR> 
<TR> <TD>   </TD> <TD> 1. </TD> <TD> eval </TD> <TD> outdegree (density) </TD> <TD align="right"> -2.71 </TD> <TD> ( </TD> <TD align="right"> 0.13 </TD> <TD> ) </TD> <TD align="right"> 0.04 </TD> </TR>
  <TR> <TD>   </TD> <TD> 2. </TD> <TD> eval </TD> <TD> reciprocity </TD> <TD align="right"> 2.42 </TD> <TD> ( </TD> <TD align="right"> 0.23 </TD> <TD> ) </TD> <TD align="right"> -0.01 </TD> </TR>
  <TR> <TD>   </TD> <TD> 3. </TD> <TD> eval </TD> <TD> transitive triplets </TD> <TD align="right"> 0.65 </TD> <TD> ( </TD> <TD align="right"> 0.15 </TD> <TD> ) </TD> <TD align="right"> -0.03 </TD> </TR>
  <TR> <TD>   </TD> <TD> 4. </TD> <TD> eval </TD> <TD> 3-cycles </TD> <TD align="right"> -0.09 </TD> <TD> ( </TD> <TD align="right"> 0.28 </TD> <TD> ) </TD> <TD align="right"> -0.03 </TD> </TR>
  <TR> <TD>   </TD> <TD> 5. </TD> <TD> eval </TD> <TD> smoke1 similarity </TD> <TD align="right"> 0.25 </TD> <TD> ( </TD> <TD align="right"> 0.21 </TD> <TD> ) </TD> <TD align="right"> -0.00 </TD> </TR>
  <TR> <TD>   </TD> <TD> 6. </TD> <TD> eval </TD> <TD> alcohol alter </TD> <TD align="right"> -0.02 </TD> <TD> ( </TD> <TD align="right"> 0.07 </TD> <TD> ) </TD> <TD align="right"> -0.00 </TD> </TR>
  <TR> <TD>   </TD> <TD> 7. </TD> <TD> eval </TD> <TD> alcohol ego </TD> <TD align="right"> 0.03 </TD> <TD> ( </TD> <TD align="right"> 0.07 </TD> <TD> ) </TD> <TD align="right"> -0.01 </TD> </TR>
  <TR> <TD>   </TD> <TD> 8. </TD> <TD> eval </TD> <TD> alcohol ego x alcohol alter </TD> <TD align="right"> 0.13 </TD> <TD> ( </TD> <TD align="right"> 0.05 </TD> <TD> ) </TD> <TD align="right"> 0.05 </TD> </TR>
   </TABLE>
> 
> # to get html, and e.g.
> 
>         xtable( ans, file = 'ff.tex' )
> 
> # to write the results to a file.
> # At http://cran.r-project.org/web/packages/xtable you can find
> # a set of vignettes for the xtable package, the xtable gallery,
> # which gives more options.
> # A function siena.table is available that is specially designed
> # for RSiena results.
> 
> ############## MORE ON INITIALIZING PARAMETERS FOR ESTIMATION ########
> 
> # If the estimation algorithm has not produced good estimates
> # (it 'has not converged well'),
> # as will be indicated by some of the t-ratios for convergence
> # being larger than 0.1 (this threshold is not to be taken too precisely, though),
> # the best thing to do is continuing the estimation,
> # using the estimates produced here,
> # and contained in ans, as the new initial values.
> # This is done by the option prevAns ('previous ans') as in
> 
>         ans <- siena07(mymodel, data=mydata, effects=myeff, prevAns=ans)
> 
> # the parameter estimates in ans then are  extracted and
> # used in the new estimation,
> # and moreover Phase 1 will be omitted from the algorithm,
> # as derivatives and covariance matrix are used from the previous run.
> # This should be used only if the model specification in myeff
> # has not changed, and if the provisional parameter estimates obtained
> # in ans are reasonable; if they are not reasonable,
> # omit the prevAns option, use
> #       mymodel$useStdInits <- TRUE
> # to get back on track, and return at the next estimation to
> #       mymodel$useStdInits <- FALSE
> # To understand what happens here, read on:
> 
> # Another and more flexible way for determining initial values is by
> # using the useStdInits element of the model object,
> # and the initial values in the effects object.
> # This is done as follows.
> # The option useStdInits = TRUE in sienaModelCreate, will make
> # each estimation run start with standard initial values.
> # The option useStdInits = FALSE makes the estimation start
> # with the initial values in the effects object.
> # You can switch between these by commands such as
> 
> #       mymodel$useStdInits <- FALSE
> #       mymodel$useStdInits <- TRUE
> 
> # Putting the estimates from the results object ans into the
> # effects object myeff is done by
> #       myeff <- update(myeff, ans)
> # A check that the effects object contains the desired initial values is made by
> 
>         myeff
   effectName                          include fix   test  initialValue parm
1  constant friendship rate (period 1) TRUE    FALSE FALSE    4.69604   0   
2  constant friendship rate (period 2) TRUE    FALSE FALSE    4.32885   0   
3  outdegree (density)                 TRUE    FALSE FALSE   -1.46770   0   
4  reciprocity                         TRUE    FALSE FALSE    0.00000   0   
5  transitive triplets                 TRUE    FALSE FALSE    0.00000   0   
6  3-cycles                            TRUE    FALSE FALSE    0.00000   0   
7  smoke1 similarity                   TRUE    FALSE FALSE    0.00000   0   
8  alcohol alter                       TRUE    FALSE FALSE    0.00000   0   
9  alcohol ego                         TRUE    FALSE FALSE    0.00000   0   
10 alcohol ego x alcohol alter         TRUE    FALSE FALSE    0.00000   0   
> 
> # The initial values are in the vector
>         myeff$initialValue[myeff$include]
 [1]  4.696042  4.328845 -1.467705  0.000000  0.000000  0.000000  0.000000
 [8]  0.000000  0.000000  0.000000
> # and this also can be initialised differently, if this is desired.
> # Note that this initial vector will be used until you change it again,
> # e.g., to the results of a new run,
> # or until you change the useStdInits option.
> 
> ################################################################################
> ###
> ### ---- Testing effects -------------------------------------------------------
> ###
> ################################################################################
> #
> # Two types of tests are available in SIENA.
> # 1. t-type tests of single parameters can be carried out by dividing
> # the parameter estimate by its standard error.
> # Under the null hypothesis that the parameter is 0, these tests have
> # approximately a standard normal distribution.
> # 2. Score-type tests of single and multiple parameters are described
> # in the manual.
> # Parameters can be restricted by putting TRUE in the
> # include, fix and test columns of the effects object.
> # For example, to request a score test for the indegree popularity effect,
> # the commands can be as follows.
> 
> #        myeff <- setEffect(myeff, inPopSqrt, fix=TRUE, test=TRUE,
> #                                          initialValue=0.0)
> #        ans <- siena07(mymodel, data=mydata, effects=myeff)
> 
> # After such an operation, again request
> #        myeff
> # to see what you have done.
> 
> 
> ################################################################################
> ###
> ### ---- Time test -------------------------------------------------------------
> ###
> ################################################################################
> #
> # An application of the score test is given for the special case of parameter
> # heterogeneity by Lospinoso et al. (2010) and implemented in RSiena.
> # To apply the test to the results obtained above. request, e.g.,
> #        tt2 <- sienaTimeTest(ans)
> #        plot(tt2, effects=3:4)
> # If as a consequence of this analysis you wish to add time dummy terms,
> # this may be done via
> #        myeff <- includeTimeDummy(myeff, transTrip, cycle3, timeDummy="2")
> #        ans3 <- siena07(mymodel, data=mydata, effects=myeff, batch=TRUE)
> # and testing again,
> #        tt3 <- sienaTimeTest(ans3)
> # and so on.
> 
> ################################################################################
> ###
> ### ---- Summary of model fitted -----------------------------------------------
> ###
> ################################################################################
> 
>         friend.data.w1 <- as.matrix(read.table("s50-network1.dat")) # read data
>         friend.data.w2 <- as.matrix(read.table("s50-network2.dat"))
>         friend.data.w3 <- as.matrix(read.table("s50-network3.dat"))
>         drink <- as.matrix(read.table("s50-alcohol.dat"))
>         smoke <- as.matrix(read.table("s50-smoke.dat"))
> 
>         friend.data.w1[ friend.data.w1 %in% c(6,9) ] <- NA # define missing data
>         friend.data.w1[ friend.data.w2 %in% c(6,9) ] <- NA
>         friend.data.w1[ friend.data.w3 %in% c(6,9) ] <- NA
> 
>         friendship <- sienaDependent( array( c( friend.data.w1,
+                                           friend.data.w2, friend.data.w3 ),
+                                dim = c( 50, 50, 3 ) ) )
> 
>         drinkingbeh <- sienaDependent( drink, type = "behavior" )
>         smoke1 <- coCovar( smoke[ , 1 ] )
>         alcohol <- varCovar( drink )
> 
>         mydata <- sienaDataCreate( friendship, smoke1, alcohol )
> 
>         myeff <- getEffects( mydata )# create effects structure
> 
>         print01Report( mydata, myeff, modelname = 's50_3_init' )
> 
>         myeff <- includeEffects( myeff, transTrip, cycle3 )
                            name shortName type interaction1 interaction2
friendship.obj.eval.3 friendship transTrip eval                          
friendship.obj.eval.5 friendship    cycle3 eval                          
                      include
friendship.obj.eval.3    TRUE
friendship.obj.eval.5    TRUE
>         myeff <- includeEffects( myeff, egoX, altX,
+                                 egoXaltX, interaction1 = "alcohol" )
                             name shortName type interaction1 interaction2
friendship.obj.eval.46 friendship      altX eval      alcohol             
friendship.obj.eval.48 friendship      egoX eval      alcohol             
friendship.obj.eval.53 friendship  egoXaltX eval      alcohol             
                       include
friendship.obj.eval.46    TRUE
friendship.obj.eval.48    TRUE
friendship.obj.eval.53    TRUE
>         myeff <- includeEffects( myeff, simX, interaction1 = "smoke1" )
                             name shortName type interaction1 interaction2
friendship.obj.eval.36 friendship      simX eval       smoke1             
                       include
friendship.obj.eval.36    TRUE
> 
>         mymodel <- sienaModelCreate( useStdInits = TRUE, projname = 's50_3' )
>         ans <- siena07( mymodel, data = mydata, effects = myeff)
> 
> ################################################################################
> ###
> ### -- PROCEED TO Rscript04SienaBehaviour.R FOR
> ###                                 MODELING NETWORKS AND BEHAVIOUR BY RSIENA --
> ###
> ################################################################################
> ################################################################################
> ###
> ### ---- Rscript04SienaBehaviour.R: a script for the introduction to RSiena ------
> ###
> ###                                    version January 17, 2012
> ################################################################################
> #
> # The introductory script is divided into the follwing script files:
> # Rscript01DataFormat.R, followed by
> # RScriptSNADescriptives.R, code for descriptive analysis of the data, and
> # Rscript02SienaVariableFormat.R, that formats data and specifies the model, and
> # Rscript03SienaRunModel.R, that runs the model and estimates parameters
> # Rscript04SienaBehaviour.R, that illustrates an example of analysing the
> # coevolution of networks and behaviour
> # Written with contributions by Robin Gauthier, Tom Snijders, Ruth Ripley,
> # and Johan Koskinen.
> #
> 
> # Here is a short script for analysing the co-evolution of the
> # friendship network and drinking behaviour for the 50 girls in the
> # Teenage Friends and Lifestyle Study data
> # (http://www.stats.ox.ac.uk/~snijders/siena/s50_data.zip), described in
> # http://www.stats.ox.ac.uk/~snijders/siena/s50_data.htm
> 
> # Read in the adjacency matrices, covariates and dependent behavioural variable
> # assuming data are in current working directory
> 
>         friend.data.w1 <- as.matrix(read.table("s50-network1.dat"))# network
>         friend.data.w2 <- as.matrix(read.table("s50-network2.dat"))
>         friend.data.w3 <- as.matrix(read.table("s50-network3.dat"))
>         drink <- as.matrix(read.table("s50-alcohol.dat"))# behaviour
>         smoke <- as.matrix(read.table("s50-smoke.dat"))# covariate
> 
> # At this point it is a good idea to use the sna package to plot the networks
> # and the behavioural variable. Descriptive measures of the similarity of
> # "friends" with respect to behaviour (like Moran's I) are given by the function
> # nacf() in the sna package
> 
> # Tell RSiena that the adjacency matrices are network data and in what order
> # they should be treated
> 
>       friendship <- sienaDependent( array( c( friend.data.w1, friend.data.w2,
+                                         friend.data.w3 ),
+                              dim = c( 50, 50, 3 ) ) )# create dependent variable
> 
> # Tell RSiena that the variable "drink" should be treated as a dependent variable
> 
>         drinkingbeh <- sienaDependent( drink, type = "behavior" )
> 
>         smoke1 <- coCovar( smoke[ , 1 ] )
> 
>         myCoEvolutionData <- sienaDataCreate( friendship, smoke1, drinkingbeh )
> 
>         myCoEvolutionEff <- getEffects( myCoEvolutionData )
> 
> # Run reports to check that data is properly formated and
> # to get some basic descriptives
> 
>         print01Report( myCoEvolutionData, myCoEvolutionEff,
+                        modelname = 's50_3_CoEvinit' )
> 
> # Define the effects to include in the coevolution model
> # Start with some structural effects (use the shortnames that you find in
> # RShowDoc("effects", package="RSiena") )
> 
>         myCoEvolutionEff <- includeEffects( myCoEvolutionEff, transTrip, cycle3)
                            name shortName type interaction1 interaction2
friendship.obj.eval.3 friendship transTrip eval                          
friendship.obj.eval.5 friendship    cycle3 eval                          
                      include
friendship.obj.eval.3    TRUE
friendship.obj.eval.5    TRUE
> 
> # Include a homophily effect for the constant covariate smoking
> 
>         myCoEvolutionEff <- includeEffects( myCoEvolutionEff, simX,
+                                             interaction1 = "smoke1" )
                             name shortName type interaction1 interaction2
friendship.obj.eval.36 friendship      simX eval       smoke1             
                       include
friendship.obj.eval.36    TRUE
> 
> # If we want to parse out whether there is a selection or influence (or both)
> # effect for drinking behaviour,
> # we need to first include sender, receiver and homophily effects
> # of drinking for friendship formation:
> 
>         myCoEvolutionEff <- includeEffects(myCoEvolutionEff, egoX, altX, simX,
+                                            interaction1 = "drinkingbeh" )
                             name shortName type interaction1 interaction2
friendship.obj.eval.46 friendship      altX eval  drinkingbeh             
friendship.obj.eval.48 friendship      egoX eval  drinkingbeh             
friendship.obj.eval.49 friendship      simX eval  drinkingbeh             
                       include
friendship.obj.eval.46    TRUE
friendship.obj.eval.48    TRUE
friendship.obj.eval.49    TRUE
> 
> # For the influence part, i.e. the effect of the network on behaviour,
> # we specify the following effects:
> # Now indegree, outdegree and assimilation effects for drinking
> 
>   myCoEvolutionEff <- includeEffects( myCoEvolutionEff, name = "drinkingbeh",
+                                       avAlt,indeg, outdeg,
+                                       interaction1 = "friendship" )
                               name shortName type interaction1 interaction2
drinkingbeh.obj.eval.5  drinkingbeh     indeg eval   friendship             
drinkingbeh.obj.eval.6  drinkingbeh    outdeg eval   friendship             
drinkingbeh.obj.eval.15 drinkingbeh     avAlt eval   friendship             
                        include
drinkingbeh.obj.eval.5     TRUE
drinkingbeh.obj.eval.6     TRUE
drinkingbeh.obj.eval.15    TRUE
> 
> # Check what effects you have decided to include:
> 
>         myCoEvolutionEff
   name        effectName                           include fix   test 
1  friendship  constant friendship rate (period 1)  TRUE    FALSE FALSE
2  friendship  constant friendship rate (period 2)  TRUE    FALSE FALSE
3  friendship  outdegree (density)                  TRUE    FALSE FALSE
4  friendship  reciprocity                          TRUE    FALSE FALSE
5  friendship  transitive triplets                  TRUE    FALSE FALSE
6  friendship  3-cycles                             TRUE    FALSE FALSE
7  friendship  smoke1 similarity                    TRUE    FALSE FALSE
8  friendship  drinkingbeh alter                    TRUE    FALSE FALSE
9  friendship  drinkingbeh ego                      TRUE    FALSE FALSE
10 friendship  drinkingbeh similarity               TRUE    FALSE FALSE
11 drinkingbeh rate drinkingbeh (period 1)          TRUE    FALSE FALSE
12 drinkingbeh rate drinkingbeh (period 2)          TRUE    FALSE FALSE
13 drinkingbeh behavior drinkingbeh linear shape    TRUE    FALSE FALSE
14 drinkingbeh behavior drinkingbeh quadratic shape TRUE    FALSE FALSE
15 drinkingbeh behavior drinkingbeh indegree        TRUE    FALSE FALSE
16 drinkingbeh behavior drinkingbeh outdegree       TRUE    FALSE FALSE
17 drinkingbeh behavior drinkingbeh average alter   TRUE    FALSE FALSE
   initialValue parm
1     4.69604   0   
2     4.32885   0   
3    -1.46770   0   
4     0.00000   0   
5     0.00000   0   
6     0.00000   0   
7     0.00000   0   
8     0.00000   0   
9     0.00000   0   
10    0.00000   0   
11    0.70571   0   
12    0.84939   0   
13    0.32237   0   
14    0.00000   0   
15    0.00000   0   
16    0.00000   0   
17    0.00000   0   
> 
> # Define the model as data + effects:
> 
>         myCoEvModel <- sienaModelCreate( useStdInits = TRUE,
+                                          projname = 's50CoEv_3' )
> 
> # Estimate model
> 
>         ans <- siena07( myCoEvModel, data = myCoEvolutionData,
+                         effects = myCoEvolutionEff)
> 
> # THE RESULTS
> 
> # To look at the results, type
> 
>         ans
Estimates, standard errors and convergence t-ratios

                                                Estimate   Standard   Convergence 
                                                             Error      t-ratio   
Network Dynamics 
   1. rate constant friendship rate (period 1)   6.5933  ( 1.1409   )    0.0411   
   2. rate constant friendship rate (period 2)   5.1515  ( 0.8285   )   -0.0275   
   3. eval outdegree (density)                  -2.7710  ( 0.1481   )    0.0009   
   4. eval reciprocity                           2.3881  ( 0.2303   )   -0.0063   
   5. eval transitive triplets                   0.6476  ( 0.1449   )    0.0153   
   6. eval 3-cycles                             -0.0700  ( 0.2997   )    0.0206   
   7. eval smoke1 similarity                     0.1818  ( 0.2420   )    0.0638   
   8. eval drinkingbeh alter                    -0.0424  ( 0.1088   )   -0.0999   
   9. eval drinkingbeh ego                       0.0714  ( 0.1225   )   -0.0897   
  10. eval drinkingbeh similarity                1.3158  ( 0.7283   )   -0.0068   

Behavior Dynamics
  11. rate rate drinkingbeh (period 1)           1.2724  ( 0.3684   )    0.0185   
  12. rate rate drinkingbeh (period 2)           1.7449  ( 0.5207   )    0.0767   
  13. eval behavior drinkingbeh linear shape    -0.3814  ( 0.8573   )   -0.0163   
  14. eval behavior drinkingbeh quadratic shape -1.0387  ( 1.4304   )   -0.0287   
  15. eval behavior drinkingbeh indegree        -0.4495  ( 1.3363   )   -0.0036   
  16. eval behavior drinkingbeh outdegree        0.8562  ( 1.8171   )   -0.0951   
  17. eval behavior drinkingbeh average alter    2.2576  ( 3.1373   )   -0.0989   

Total of 3632 iteration steps.

> 
> # or, somewhat more extensive,
> 
>         summary(ans)
Estimates, standard errors and convergence t-ratios

                                                Estimate   Standard   Convergence 
                                                             Error      t-ratio   
Network Dynamics 
   1. rate constant friendship rate (period 1)   6.5933  ( 1.1409   )    0.0411   
   2. rate constant friendship rate (period 2)   5.1515  ( 0.8285   )   -0.0275   
   3. eval outdegree (density)                  -2.7710  ( 0.1481   )    0.0009   
   4. eval reciprocity                           2.3881  ( 0.2303   )   -0.0063   
   5. eval transitive triplets                   0.6476  ( 0.1449   )    0.0153   
   6. eval 3-cycles                             -0.0700  ( 0.2997   )    0.0206   
   7. eval smoke1 similarity                     0.1818  ( 0.2420   )    0.0638   
   8. eval drinkingbeh alter                    -0.0424  ( 0.1088   )   -0.0999   
   9. eval drinkingbeh ego                       0.0714  ( 0.1225   )   -0.0897   
  10. eval drinkingbeh similarity                1.3158  ( 0.7283   )   -0.0068   

Behavior Dynamics
  11. rate rate drinkingbeh (period 1)           1.2724  ( 0.3684   )    0.0185   
  12. rate rate drinkingbeh (period 2)           1.7449  ( 0.5207   )    0.0767   
  13. eval behavior drinkingbeh linear shape    -0.3814  ( 0.8573   )   -0.0163   
  14. eval behavior drinkingbeh quadratic shape -1.0387  ( 1.4304   )   -0.0287   
  15. eval behavior drinkingbeh indegree        -0.4495  ( 1.3363   )   -0.0036   
  16. eval behavior drinkingbeh outdegree        0.8562  ( 1.8171   )   -0.0951   
  17. eval behavior drinkingbeh average alter    2.2576  ( 3.1373   )   -0.0989   

Total of 3632 iteration steps.

Covariance matrix of estimates (correlations below diagonal)

       1.302       -0.083        0.014        0.000       -0.012       -0.002       -0.004        0.004       -0.006       -0.032       -0.032        0.040        0.152        0.157        0.168       -0.257       -0.319
      -0.088        0.686        0.020        0.014       -0.002       -0.029        0.017        0.005        0.004       -0.110       -0.010       -0.038       -0.053       -0.200       -0.165        0.224        0.438
       0.085        0.163        0.022       -0.015       -0.006        0.003        0.003        0.002       -0.003       -0.051       -0.001       -0.011       -0.016       -0.032       -0.040        0.052        0.057
      -0.001        0.076       -0.428        0.053        0.009       -0.030        0.007       -0.002        0.005       -0.034       -0.008       -0.004        0.000       -0.050       -0.054        0.067        0.111
      -0.070       -0.016       -0.298        0.256        0.021       -0.035        0.003        0.000        0.001       -0.012       -0.008       -0.009       -0.013       -0.044       -0.038        0.054        0.096
      -0.006       -0.116        0.069       -0.432       -0.805        0.090       -0.008       -0.001       -0.001        0.044        0.019        0.015        0.031        0.108        0.099       -0.137       -0.230
      -0.016        0.083        0.075        0.129        0.095       -0.116        0.059        0.005        0.008       -0.077        0.003       -0.017       -0.044       -0.150       -0.150        0.202        0.319
       0.029        0.057        0.145       -0.079       -0.027       -0.031        0.186        0.012       -0.008       -0.008        0.000       -0.005       -0.004        0.001       -0.004        0.004       -0.001
      -0.040        0.037       -0.188        0.172        0.040       -0.017        0.261       -0.597        0.015       -0.007       -0.003       -0.005       -0.013       -0.041       -0.029        0.045        0.090
      -0.038       -0.183       -0.476       -0.205       -0.115        0.203       -0.437       -0.097       -0.077        0.530        0.053        0.112        0.136        0.504        0.528       -0.701       -1.071
      -0.077       -0.032       -0.020       -0.095       -0.142        0.171        0.036        0.008       -0.076        0.198        0.136        0.022        0.002        0.060        0.075       -0.099       -0.123
       0.068       -0.088       -0.142       -0.033       -0.122        0.098       -0.134       -0.093       -0.082        0.295        0.115        0.271        0.103        0.277        0.224       -0.335       -0.601
       0.156       -0.075       -0.125       -0.001       -0.105        0.121       -0.211       -0.040       -0.123        0.217        0.007        0.231        0.735        0.673        0.440       -0.854       -1.421
       0.096       -0.168       -0.149       -0.152       -0.211        0.253       -0.432        0.008       -0.236        0.484        0.114        0.372        0.548        2.046        1.737       -2.470       -4.443
       0.110       -0.149       -0.200       -0.174       -0.194        0.247       -0.463       -0.030       -0.178        0.543        0.152        0.322        0.384        0.909        1.786       -2.378       -3.699
      -0.124        0.149        0.193        0.160        0.207       -0.252        0.460        0.019        0.202       -0.530       -0.147       -0.354       -0.548       -0.950       -0.979        3.302        5.270
      -0.089        0.169        0.122        0.154        0.211       -0.245        0.421       -0.003        0.233       -0.469       -0.107       -0.368       -0.528       -0.990       -0.882        0.925        9.843

Derivative matrix of expected statistics X by parameters:

       9.070        0.000        1.288        2.040       15.927        5.296       -0.158       -0.935       -0.712       -0.192        0.494        0.000       -0.833       -0.632       -1.445       -1.548       -1.106
       0.000       11.493        2.273        2.573       20.044        6.687        0.277       -0.961       -0.465        0.365        0.000        0.837        0.756        0.340        3.029        2.840       -1.565
      38.991       28.882      278.873      218.084      529.485      168.583       19.674       -1.996       13.973       22.800       -2.242        0.329       22.314       18.068       51.921       51.471       23.644
       6.215        5.525      123.851      135.126      273.466       91.003        9.129       -1.136        1.826       11.473       -1.339       -0.033       10.245        4.468       26.149       21.392        7.192
      45.813       36.955      332.832      298.953     1211.976      388.530       23.973       22.079       31.304       25.965       -0.012       -0.805       21.461        9.979       62.053       56.078       10.312
      17.428       16.182      156.257      149.982      561.856      189.566       11.401        7.997       10.476       11.616       -0.894        0.030       11.077        0.892       32.230       25.807        5.076
       8.051        2.004       21.937       17.177       46.226       15.170       38.605      -53.260      -47.753        5.813       -2.544       -1.151       -4.740       -4.490      -10.652      -11.242       -5.662
      -2.103        3.791       31.488       34.577      100.277       33.259      -43.907      282.255      199.661        0.655        4.958        1.520       35.128       19.878       76.778       78.204       26.174
      -1.085        4.495       26.040       13.493       63.161       17.912      -41.369      200.220      244.316        0.378        2.264       -3.556       10.935       25.503       22.671       25.339       23.277
       6.762        4.558       31.291       26.012       59.693       19.257        5.361       -1.848       -1.918        9.155       -1.122       -1.144        0.307        3.587        0.354        0.706        2.185
       0.889        0.000       -5.163       -4.645      -15.099       -5.433       -3.269        2.593        2.488       -2.554       13.190        0.000        9.608       -1.972       20.277       20.582        0.367
       0.000        0.055        4.698        4.048       17.148        5.244       -1.417        6.915        5.854       -0.612        0.000       10.602        6.697       -1.141       17.744       17.229        3.446
       0.596       -1.403        0.576       -0.990      -10.011       -3.489       -1.491        5.483        4.760       -0.167        3.116        4.600       36.968        9.845       88.377       86.090        9.891
      -1.117       -3.369       -8.615       -7.390      -24.888       -7.896        0.240       -0.325        2.329       -0.438        3.829        1.125        6.137       93.970       29.118       29.204       57.363
       2.891       -6.180        2.358       -1.595      -33.145      -10.967       -2.165       10.297        6.876       -1.614        8.915       13.539       95.448       31.214      268.466      252.042       23.072
       3.714       -6.421       -6.254       -8.651      -46.440      -14.824       -4.480       11.288        7.969       -1.002       10.270       13.303       86.789       43.467      237.512      233.915       19.882
      -1.082       -0.897        0.604        0.909        0.424        0.138        0.931       -1.331       -0.460        0.094        0.133       -0.462       -1.914       32.163        0.403       -2.045       27.004

Covariance matrix of X (correlations below diagonal):

     119.335       -0.265       81.458       57.698      296.950       95.275       11.791      -21.157      -20.691        4.210        5.348        2.045        6.085      -12.485       18.536       14.194      -13.796
      -0.003       94.242       64.522       44.242      201.867       65.192        3.769        5.398        6.712        5.511       -0.300        3.100        3.355       -6.546        7.470        7.839       -9.821
       0.328        0.292      518.132      437.686     1449.859      469.884       50.056       -2.191       10.964       37.920        1.128       -0.628       51.342       -8.739      139.068      124.477       16.274
       0.255        0.220        0.927      430.201     1347.379      441.765       42.550       12.901       14.519       34.235       -0.063       -0.027       45.352       -0.972      123.493      104.438       22.253
       0.351        0.269        0.823        0.840     5984.415     1947.572      150.250       76.898      110.540      108.021        2.285        1.385      139.767       19.685      420.089      350.307       61.534
       0.345        0.265        0.816        0.842        0.995      639.958       48.814       26.335       34.018       35.026        0.944        0.198       44.995        5.974      135.983      111.632       19.875
       0.153        0.055        0.311        0.290        0.275        0.273       49.986      -78.357      -71.297        8.168       -1.061       -1.177       -2.835       -7.814       -4.178       -5.909       -5.180
      -0.089        0.026       -0.004        0.029        0.046        0.048       -0.511      470.225      365.541        0.414        0.028       -2.942       30.139       49.396       65.789       67.773       48.682
      -0.092        0.034        0.024        0.034        0.070        0.066       -0.492        0.823      419.450       -0.086       -4.331       -5.443       23.144       47.421       56.739       55.226       46.980
       0.093        0.136        0.400        0.397        0.336        0.333        0.278        0.005       -0.001       17.322       -2.532       -1.816        1.722        4.339        7.336        3.531        1.962
       0.107       -0.007        0.011       -0.001        0.006        0.008       -0.033        0.000       -0.046       -0.133       21.041        0.850       15.102        0.223       32.459       34.958       -0.656
       0.037        0.063       -0.005        0.000        0.004        0.002       -0.033       -0.027       -0.052       -0.086        0.036       25.964       16.539       -2.515       40.400       40.884       -0.180
       0.056        0.035        0.226        0.219        0.181        0.178       -0.040        0.139        0.113        0.042        0.330        0.326       99.331       17.287      234.709      231.146       29.928
      -0.081       -0.048       -0.027       -0.003        0.018        0.017       -0.078        0.161        0.163        0.074        0.003       -0.035        0.122      201.139       70.463       60.286      132.891
       0.065        0.029        0.234        0.228        0.208        0.206       -0.023        0.116        0.106        0.068        0.271        0.304        0.902        0.190      681.061      602.655       93.343
       0.052        0.032        0.218        0.201        0.181        0.176       -0.033        0.125        0.108        0.034        0.304        0.320        0.925        0.170        0.921      628.437       69.048
      -0.097       -0.078        0.055        0.082        0.061        0.060       -0.056        0.172        0.176        0.036       -0.011       -0.003        0.230        0.719        0.274        0.211      169.980
> 
> # Note that the column 't statistic' gives the t-ratio for convergence,
> # not the t statistic for testing that the parameter is 0.
> # For good convergence, the t-ratios for convergence
> # all should be less than .1 in aboslute value (see the manual).
> 
> # For this small data set, the model for behavior dynamics is over-specified,
> # leading to some very large standard errors.
> # Running a model modified by
> #          myCoEvolutionEff <- includeEffects( myCoEvolutionEff,
> #                               name = "drinkingbeh", indeg, outdeg,
> #                               interaction1 = "friendship" ,include = FALSE)
> # without degree effects on behaviour gives better results.
> 
> 
> proc.time()
   user  system elapsed 
 340.26    4.57  357.69 
